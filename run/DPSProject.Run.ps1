#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 8fbe689d-800d-4b8f-88a6-fb0267c2023f
# Source File: C:\Users\YutongGu\Desktop\Powershell\ReportSC\DPSProject.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.3.130
     Generated on:       12/27/2016 12:35 PM
     Generated by:       YutongGu
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	#[string]$ScriptDirectory = $PSScriptRoot
	$scriptDirectory = $PSScriptRoot
	<#[string]$ScriptDirectory = [System.AppDomain]::CurrentDomain.BaseDirectory.TrimEnd('\')
	if ($ScriptDirectory -eq $PSHOME.TrimEnd('\'))
	{
		$scriptDirectory = $PSScriptRoot
	}#>
	
	$index = $ScriptDirectory.LastIndexOf("ReportSC")
	
	$ScriptDirectory=$ScriptDirectory.Substring(0,$index)+"ReportSC"
	. $scriptDirectory\bin\PDFConverter.ps1
	. $scriptDirectory\bin\DPSReportSearch.ps1
	. $ScriptDirectory\bin\DPSTextParser.ps1
	. $ScriptDirectory\bin\ReportIO.ps1
	. $ScriptDirectory\bin\makeHistogram.ps1
	. $ScriptDirectory\bin\UpdateDataset.ps1
	. $ScriptDirectory\bin\DPSCrimeLogGrabber.ps1
	. $ScriptDirectory\bin\PDFConverter.ps1
	#[System.Windows.forms.MessageBox]::Show("$ScriptDirectory", "Error")
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	[System.Collections.IList]$global:errorList = new-object System.Collections.ArrayList
	[System.Collections.IList]$global:reportList = new-object System.Collections.ArrayList
	$global:searchList
	$global:changed = $false
	[string]$global:datasetFile = ""
	
	$global:searchstate = $false
	$global:editedsearch=$false
	$global:mainDataTable = New-Object System.Data.DataTable
	$global:table = @{ }
	$global:histogram = @{ }
	[string]$global:loaddirectory = ""
	[string]$global:exportdirectory = ""
	[string]$global:histogramdirectory = ""
	#region Add Dialog
	$global:addDialog = New-Object system.Windows.Forms.Form
	$global:addDialogSave = New-Object System.Windows.Forms.Button
	$global:addDialogCancel = New-Object System.Windows.Forms.Button
	$global:addDialogLabel1 = New-Object System.Windows.Forms.Label
	$global:addDialogLabel2 = New-Object System.Windows.Forms.Label
	$global:addDialogLabel3 = New-Object System.Windows.Forms.Label
	$global:addDialogLabel4 = New-Object System.Windows.Forms.Label
	$global:addDialogLabel5 = New-Object System.Windows.Forms.Label
	$global:addDialogLabel6 = New-Object System.Windows.Forms.Label
	$global:addDialogLabel7 = New-Object System.Windows.Forms.Label
	$global:addDialogLabel8 = New-Object System.Windows.Forms.Label
	$global:addDialogField1 = New-Object System.Windows.Forms.TextBox
	$global:addDialogField2 = New-Object System.Windows.Forms.TextBox
	$global:addDialogField3 = New-Object System.Windows.Forms.TextBox
	$global:addDialogField4 = New-Object System.Windows.Forms.TextBox
	$global:addDialogField5 = New-Object System.Windows.Forms.TextBox
	$global:addDialogField6 = New-Object System.Windows.Forms.TextBox
	$global:addDialogField7 = New-Object System.Windows.Forms.TextBox
	$global:addDialogField8 = New-Object System.Windows.Forms.TextBox
	
	$global:addDialog.Text = "Add Report"
	$global:addDialog.StartPosition = "CenterScreen"
	$global:addDialog.FormBorderStyle = 'FixedDialog'
	$global:addDialog.Size = New-Object System.Drawing.Size(500, 550)
	
	$global:addDialogLabel1.Text = "File #: "
	$global:addDialogLabel2.Text = "Report #:"
	$global:addDialogLabel3.Text = "Reported: "
	$global:addDialogLabel4.Text = "Occurred: "
	$global:addDialogLabel5.Text = "Incident: "
	$global:addDialogLabel6.Text = "Location: "
	$global:addDialogLabel7.Text = "Disposition: "
	$global:addDialogLabel8.Text = "Summary: "
	
	$global:addDialogLabel1.Location = New-Object System.Drawing.Size(25, 10)
	$global:addDialogLabel1.Size = New-Object System.Drawing.Size(425, 20)
	$global:addDialogLabel2.Location = New-Object System.Drawing.Size(25, 60)
	$global:addDialogLabel2.Size = New-Object System.Drawing.Size(425, 20)
	$global:addDialogLabel3.Location = New-Object System.Drawing.Size(25, 110)
	$global:addDialogLabel3.Size = New-Object System.Drawing.Size(425, 20)
	$global:addDialogLabel4.Location = New-Object System.Drawing.Size(25, 160)
	$global:addDialogLabel4.Size = New-Object System.Drawing.Size(425, 20)
	$global:addDialogLabel5.Location = New-Object System.Drawing.Size(25, 210)
	$global:addDialogLabel5.Size = New-Object System.Drawing.Size(425, 20)
	$global:addDialogLabel6.Location = New-Object System.Drawing.Size(25, 260)
	$global:addDialogLabel6.Size = New-Object System.Drawing.Size(425, 20)
	$global:addDialogLabel7.Location = New-Object System.Drawing.Size(25, 310)
	$global:addDialogLabel7.Size = New-Object System.Drawing.Size(425, 20)
	$global:addDialogLabel8.Location = New-Object System.Drawing.Size(25, 360)
	$global:addDialogLabel8.Size = New-Object System.Drawing.Size(425, 20)
	
	$global:addDialogField1.Location = New-Object System.Drawing.Size(25, 30)
	$global:addDialogField1.Size = New-Object System.Drawing.Size(425, 50)
	$global:addDialogField2.Location = New-Object System.Drawing.Size(25, 80)
	$global:addDialogField2.Size = New-Object System.Drawing.Size(425, 25)
	$global:addDialogField3.Location = New-Object System.Drawing.Size(25, 130)
	$global:addDialogField3.Size = New-Object System.Drawing.Size(425, 25)
	$global:addDialogField4.Location = New-Object System.Drawing.Size(25, 180)
	$global:addDialogField4.Size = New-Object System.Drawing.Size(425, 25)
	$global:addDialogField5.Location = New-Object System.Drawing.Size(25, 230)
	$global:addDialogField5.Size = New-Object System.Drawing.Size(425, 25)
	$global:addDialogField6.Location = New-Object System.Drawing.Size(25, 280)
	$global:addDialogField6.Size = New-Object System.Drawing.Size(425, 25)
	$global:addDialogField7.Location = New-Object System.Drawing.Size(25, 330)
	$global:addDialogField7.Size = New-Object System.Drawing.Size(425, 25)
	$global:addDialogField8.Location = New-Object System.Drawing.Size(25, 380)
	$global:addDialogField8.Size = New-Object System.Drawing.Size(425, 65)
	$global:addDialogField8.Multiline = $true
	
	$global:addDialogSave.Text = "Save"
	$global:addDialogSave.Anchor = 'Bottom'
	$global:addDialogSave.Location = New-Object System.Drawing.Size(150, 462)
	$global:addDialogSave.add_MouseClick({
			$x1 = $global:addDialogField1.Text
			$x2 = $global:addDialogField2.Text
			$x3 = $global:addDialogField3.Text
			$x4 = $global:addDialogField4.Text
			$x5 = $global:addDialogField5.Text
			$x6 = $global:addDialogField6.Text
			$x7 = $global:addDialogField7.Text
			$x8 = $global:addDialogField8.Text
			[int]$i = 0
					<#Under Construction#>
			if ($x1 -ne "" -and $x2 -ne "" -and $x3 -ne "" -and $x4 -ne "" -and $x5 -ne "" -and $x6 -ne "" -and $x7 -ne "")
			{
				if (-not ($x2 -match "\D"))
				{
					$global:changed = $true
					
					[int]$newReportNum = [convert]::ToInt32($x2)
					[int]$lower = 0
					[int]$upper = $global:reportList.count - 1
					$i = ($lower + $upper)/2
					[int]$currReportNum = 0
					while ($reportList[$i]."Report #" -match "\D") { $i++ }
					while ($newReportNum -ne $currReportNum -and $upper -ne $lower)
					{
						$currReportNum = $reportList[$i]."Report #"
						if ($newReportNum -eq $currReportNum) { break }
						if ($newReportNum -gt $currReportNum) { $lower = $i }
						if ($newReportNum -lt $currReportNum) { $upper = $i }
						$i = ($lower + $upper)/2
						while ($reportList[$i]."Report #" -match "\D") { $i++ }
						if ($i -eq $lower -or $i -eq $upper) { break }
					}
					if ($i -eq $lower -or $i -eq $upper)
					{
						while ($reportList[$i] -ne $null -and $newReportNum -gt $reportList[$i]."Report #") { $i++ }
					}
				}
				else
				{
					[System.Windows.forms.MessageBox]::Show("Report # must be a valid number", "Error")
					return
				}
			}
			else
			{
				[System.Windows.forms.MessageBox]::Show("All fields must be filled", "Error")
				return
			}
			
			$report = @{ "File" = $x1; "Report #" = $x2; "Reported" = $x3; "Occurred" = $x4; "Incident" = $x5; "Location" = $x6; "Disposition" = $x7; "Summary" = $x8 }
	
			$report."Index" = $i
			
			$row = $global:mainDataTable.newRow()
			foreach ($key in $report.Keys)
			{
				if ($global:mainDataTable.Columns.Contains($key))
				{
					$row.Item($key) = $report[$key]
				}
			}
			
			[void]$global:reportList.insert($i, $report)
			$global:mainDataTable.Rows.insertAt($row, $i)
			$i++
			for ($i; $i -lt $global:reportList.count; $i++)
			{
				$global:reportList[$i]."Index" = [System.Convert]::ToInt32($global:reportList[$i]."Index") + 1
			}
			ConvertTo-DataTable -InputObject $global:reportList -Table $global:mainDataTable -RetainColumns
			Load-DataGridView -DataGridView $datagridviewResults -Item $global:mainDataTable
			$global:addDialog.Close()
		})
	
	$global:addDialogCancel.Text = "Cancel"
	$global:addDialogCancel.Anchor = 'Bottom'
	$global:addDialogCancel.Location = New-Object System.Drawing.Size(250, 462)
	$global:addDialogCancel.add_MouseClick({
			$global:addDialog.Close()
		})
	
	$global:addDialog.Controls.Add($global:addDialogLabel1)
	$global:addDialog.Controls.Add($global:addDialogLabel2)
	$global:addDialog.Controls.Add($global:addDialogLabel3)
	$global:addDialog.Controls.Add($global:addDialogLabel4)
	$global:addDialog.Controls.Add($global:addDialogLabel5)
	$global:addDialog.Controls.Add($global:addDialogLabel6)
	$global:addDialog.Controls.Add($global:addDialogLabel7)
	$global:addDialog.Controls.Add($global:addDialogLabel8)
	$global:addDialog.Controls.Add($global:addDialogField1)
	$global:addDialog.Controls.Add($global:addDialogField2)
	$global:addDialog.Controls.Add($global:addDialogField3)
	$global:addDialog.Controls.Add($global:addDialogField4)
	$global:addDialog.Controls.Add($global:addDialogField5)
	$global:addDialog.Controls.Add($global:addDialogField6)
	$global:addDialog.Controls.Add($global:addDialogField7)
	$global:addDialog.Controls.Add($global:addDialogField8)
	$global:addDialog.Controls.add($global:addDialogSave)
	$global:addDialog.Controls.add($global:addDialogCancel)
	#endregion
	
	#region Full Report Dialog
	$global:reportDialog = New-Object system.Windows.Forms.Form
	$global:reportDialogOkay = New-Object System.Windows.Forms.Button
	$global:reportDialogLabel1 = New-Object System.Windows.Forms.Label
	$global:reportDialogLabel2 = New-Object System.Windows.Forms.Label
	$global:reportDialogLabel3 = New-Object System.Windows.Forms.Label
	$global:reportDialogLabel4 = New-Object System.Windows.Forms.Label
	$global:reportDialogLabel5 = New-Object System.Windows.Forms.Label
	$global:reportDialogLabel6 = New-Object System.Windows.Forms.Label
	$global:reportDialogLabel7 = New-Object System.Windows.Forms.Label
	
	$global:reportDialog.StartPosition = "CenterScreen"
	$global:reportDialog.FormBorderStyle = 'FixedDialog'
	$global:reportDialog.Size = New-Object System.Drawing.Size(500, 370)
	
	$global:reportDialogOkay.Location
	$global:reportDialogOkay.Text = "Okay"
	$global:reportDialogOkay.Location = New-Object System.Drawing.Size(150, 280)
	$global:reportDialogOkay.Size = New-Object System.Drawing.Size(200, 30)
	$global:reportDialogOkay.add_MouseClick({
			$global:reportDialog.Close()
		})
	$reportDialogOkay.DialogResult = 'OK'
	$global:reportDialog.AcceptButton = $global:reportDialogOkay
	
	$global:reportDialogLabel1.Location = New-Object System.Drawing.Size(25, 20)
	$global:reportDialogLabel1.Size = New-Object System.Drawing.Size(425, 30)
	$global:reportDialogLabel2.Location = New-Object System.Drawing.Size(25, 55)
	$global:reportDialogLabel2.Size = New-Object System.Drawing.Size(425, 30)
	$global:reportDialogLabel3.Location = New-Object System.Drawing.Size(25, 90)
	$global:reportDialogLabel3.Size = New-Object System.Drawing.Size(425, 30)
	$global:reportDialogLabel4.Location = New-Object System.Drawing.Size(25, 125)
	$global:reportDialogLabel4.Size = New-Object System.Drawing.Size(425, 30)
	$global:reportDialogLabel5.Location = New-Object System.Drawing.Size(25, 160)
	$global:reportDialogLabel5.Size = New-Object System.Drawing.Size(425, 30)
	$global:reportDialogLabel6.Location = New-Object System.Drawing.Size(25, 195)
	$global:reportDialogLabel6.Size = New-Object System.Drawing.Size(425, 80)
	
	$global:reportDialog.Controls.add($global:reportDialogOkay)
	$global:reportDialog.Controls.add($global:reportDialogLabel1)
	$global:reportDialog.Controls.add($global:reportDialogLabel2)
	$global:reportDialog.Controls.add($global:reportDialogLabel3)
	$global:reportDialog.Controls.add($global:reportDialogLabel4)
	$global:reportDialog.Controls.add($global:reportDialogLabel5)
	$global:reportDialog.Controls.add($global:reportDialogLabel6)
	
	$global:comboboxval = ""
	$global:filterval = ""
	#endregion
	
	#region generateHistogram
	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formGenerateHistogram = New-Object 'System.Windows.Forms.Form'
	$Divider1 = New-Object 'System.Windows.Forms.Label'
	$buttonSave = New-Object 'System.Windows.Forms.Button'
	$labelval5 = New-Object 'System.Windows.Forms.Label'
	$labelkey5 = New-Object 'System.Windows.Forms.Label'
	$labelval4 = New-Object 'System.Windows.Forms.Label'
	$labelkey4 = New-Object 'System.Windows.Forms.Label'
	$labelval3 = New-Object 'System.Windows.Forms.Label'
	$labelkey3 = New-Object 'System.Windows.Forms.Label'
	$labelval2 = New-Object 'System.Windows.Forms.Label'
	$labelkey2 = New-Object 'System.Windows.Forms.Label'
	$labelval1 = New-Object 'System.Windows.Forms.Label'
	$labelkey1 = New-Object 'System.Windows.Forms.Label'
	$labelTop5Results = New-Object 'System.Windows.Forms.Label'
	$labelExplanation = New-Object 'System.Windows.Forms.Label'
	$labelFilter = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$labelField = New-Object 'System.Windows.Forms.Label'
	$combobox = New-Object 'System.Windows.Forms.ComboBox'
	$Filter = New-Object 'System.Windows.Forms.TextBox'
	#endregion Generated Form Objects
	
	#
	# formGenerateHistogram
	#
	$formGenerateHistogram.Controls.Add($Divider1)
	$formGenerateHistogram.Controls.Add($buttonSave)
	$formGenerateHistogram.Controls.Add($labelval5)
	$formGenerateHistogram.Controls.Add($labelkey5)
	$formGenerateHistogram.Controls.Add($labelval4)
	$formGenerateHistogram.Controls.Add($labelkey4)
	$formGenerateHistogram.Controls.Add($labelval3)
	$formGenerateHistogram.Controls.Add($labelkey3)
	$formGenerateHistogram.Controls.Add($labelval2)
	$formGenerateHistogram.Controls.Add($labelkey2)
	$formGenerateHistogram.Controls.Add($labelval1)
	$formGenerateHistogram.Controls.Add($labelkey1)
	$formGenerateHistogram.Controls.Add($labelTop5Results)
	$formGenerateHistogram.Controls.Add($labelExplanation)
	$formGenerateHistogram.Controls.Add($labelFilter)
	$formGenerateHistogram.Controls.Add($buttonOK)
	$formGenerateHistogram.Controls.Add($labelField)
	$formGenerateHistogram.Controls.Add($combobox)
	$formGenerateHistogram.Controls.Add($Filter)
	$formGenerateHistogram.AcceptButton = $buttonOK
	$formGenerateHistogram.AutoScaleDimensions = '8, 17'
	$formGenerateHistogram.AutoScaleMode = 'Font'
	$formGenerateHistogram.ClientSize = '416, 387'
	$formGenerateHistogram.FormBorderStyle = 'FixedDialog'
	$formGenerateHistogram.Margin = '5, 5, 5, 5'
	$formGenerateHistogram.MaximizeBox = $False
	$formGenerateHistogram.MinimizeBox = $False
	$formGenerateHistogram.Name = 'formGenerateHistogram'
	$formGenerateHistogram.StartPosition = 'CenterScreen'
	$formGenerateHistogram.Text = 'Generate Histogram'
	#
	# Divider1
	#
	$Divider1.Anchor = 'Top'
	$Divider1.Font = 'Microsoft Sans Serif, 10pt'
	$Divider1.Location = '38, 153'
	$Divider1.Margin = '4, 4, 4, 4'
	$Divider1.Name = 'Divider1'
	$Divider1.Size = '344, 20'
	$Divider1.TabIndex = 15
	$Divider1.Text = '_________________________________'
	$Divider1.TextAlign = 'BottomCenter'
	#
	# buttonSave
	#
	$buttonSave.Anchor = 'Bottom, Right'
	$buttonSave.Location = '75, 344'
	$buttonSave.Margin = '4, 4, 4, 4'
	$buttonSave.Name = 'buttonSave'
	$buttonSave.Size = '100, 30'
	$buttonSave.TabIndex = 14
	$buttonSave.Text = '&Save'
	$buttonSave.UseVisualStyleBackColor = $True
	$buttonSave.add_click({
			if ($global:histogram -ne $null -and $global:histogram.count -ne 0)
			{
				[System.Windows.Forms.SaveFileDialog]$filedialog = New-Object System.Windows.Forms.SaveFileDialog
				if ($global:histogramdirectory -eq "")
				{
					$filedialog.InitialDirectory = "$ScriptDirectory\data"
				}
				else
				{
					$filedialog.InitialDirectory = $global:histogramdirectory
				}
				$filedialog.Title = "Export Dataset"
				$filedialog.CheckFileExists = $false
				$filedialog.CheckPathExists = $true
				$filedialog.AddExtension = $true
				$filedialog.DefaultExt = ".csv"
				$filedialog.Filter = "CSV File (*.csv)|*.csv"
				$output = $filedialog.ShowDialog()
				if ($filedialog.filename -eq "")
				{
					return
				}
				else
				{
					$global:histogram | Export-Csv $filedialog.FileName
				}
				$filePath = $filedialog.FileName
				$fileDir = $filePath.Split(0, $filePath.LastIndexOf("\"))
				if ($global:histogramdirectory -ne $fileDir)
				{
					$global:histogramdirectory = $fileDir
				}
			}
			else
			{
				[System.Windows.forms.MessageBox]::Show("No histogram has been made. Please press 'Okay' to generate histogram.", "Error")
			}
		})
	#
	# labelval5
	#
	$labelval5.Anchor = 'Top'
	$labelval5.Font = 'Microsoft Sans Serif, 10pt'
	$labelval5.Location = '338, 310'
	$labelval5.Margin = '4, 4, 4, 4'
	$labelval5.Name = 'labelval5'
	$labelval5.Size = '55, 18'
	$labelval5.TabIndex = 13
	$labelval5.Text = '0'
	#
	# labelkey5
	#
	$labelkey5.Anchor = 'Top'
	$labelkey5.Font = 'Microsoft Sans Serif, 10pt'
	$labelkey5.Location = '38, 310'
	$labelkey5.Margin = '4, 4, 4, 4'
	$labelkey5.Name = 'labelkey5'
	$labelkey5.Size = '292, 18'
	$labelkey5.TabIndex = 12
	$labelkey5.Text = 'Example5'
	#
	# labelval4
	#
	$labelval4.Anchor = 'Top'
	$labelval4.Font = 'Microsoft Sans Serif, 10pt'
	$labelval4.Location = '338, 284'
	$labelval4.Margin = '4, 4, 4, 4'
	$labelval4.Name = 'labelval4'
	$labelval4.Size = '55, 18'
	$labelval4.TabIndex = 11
	$labelval4.Text = '0'
	#
	# labelkey4
	#
	$labelkey4.Anchor = 'Top'
	$labelkey4.Font = 'Microsoft Sans Serif, 10pt'
	$labelkey4.Location = '38, 284'
	$labelkey4.Margin = '4, 4, 4, 4'
	$labelkey4.Name = 'labelkey4'
	$labelkey4.Size = '292, 18'
	$labelkey4.TabIndex = 10
	$labelkey4.Text = 'Example4'
	#
	# labelval3
	#
	$labelval3.Anchor = 'Top'
	$labelval3.Font = 'Microsoft Sans Serif, 10pt'
	$labelval3.Location = '338, 258'
	$labelval3.Margin = '4, 4, 4, 4'
	$labelval3.Name = 'labelval3'
	$labelval3.Size = '55, 18'
	$labelval3.TabIndex = 9
	$labelval3.Text = '0'
	#
	# labelkey3
	#
	$labelkey3.Anchor = 'Top'
	$labelkey3.Font = 'Microsoft Sans Serif, 10pt'
	$labelkey3.Location = '38, 258'
	$labelkey3.Margin = '4, 4, 4, 4'
	$labelkey3.Name = 'labelkey3'
	$labelkey3.Size = '292, 18'
	$labelkey3.TabIndex = 8
	$labelkey3.Text = 'Example3'
	#
	# labelval2
	#
	$labelval2.Anchor = 'Top'
	$labelval2.Font = 'Microsoft Sans Serif, 10pt'
	$labelval2.Location = '338, 232'
	$labelval2.Margin = '4, 4, 4, 4'
	$labelval2.Name = 'labelval2'
	$labelval2.Size = '55, 18'
	$labelval2.TabIndex = 7
	$labelval2.Text = '0'
	#
	# labelkey2
	#
	$labelkey2.Anchor = 'Top'
	$labelkey2.Font = 'Microsoft Sans Serif, 10pt'
	$labelkey2.Location = '38, 232'
	$labelkey2.Margin = '4, 4, 4, 4'
	$labelkey2.Name = 'labelkey2'
	$labelkey2.Size = '292, 18'
	$labelkey2.TabIndex = 6
	$labelkey2.Text = 'Example2'
	#
	# labelval1
	#
	$labelval1.Anchor = 'Top'
	$labelval1.Font = 'Microsoft Sans Serif, 10pt'
	$labelval1.Location = '338, 206'
	$labelval1.Margin = '4, 4, 4, 4'
	$labelval1.Name = 'labelval1'
	$labelval1.Size = '55, 18'
	$labelval1.TabIndex = 5
	$labelval1.Text = '0'
	#
	# labelkey1
	#
	$labelkey1.Anchor = 'Top'
	$labelkey1.Font = 'Microsoft Sans Serif, 10pt'
	$labelkey1.Location = '38, 206'
	$labelkey1.Margin = '4, 4, 4, 4'
	$labelkey1.Name = 'labelkey1'
	$labelkey1.Size = '292, 18'
	$labelkey1.TabIndex = 4
	$labelkey1.Text = 'Example1'
	#
	# labelTop5Results
	#
	$labelTop5Results.Anchor = 'Top'
	$labelTop5Results.Font = 'Microsoft Sans Serif, 10pt'
	$labelTop5Results.Location = '155, 181'
	$labelTop5Results.Margin = '4, 4, 4, 4'
	$labelTop5Results.Name = 'labelTop5Results'
	$labelTop5Results.Size = '115, 26'
	$labelTop5Results.TabIndex = 3
	$labelTop5Results.Text = 'Top 5 results'
	#
	# labelExplanation
	#
	$labelExplanation.Anchor = 'Top'
	$labelExplanation.AutoSize = $True
	$labelExplanation.Location = '75, 119'
	$labelExplanation.Margin = '4, 4, 4, 4'
	$labelExplanation.MaximumSize = '300, 0'
	$labelExplanation.Name = 'labelExplanation'
	$labelExplanation.Size = '291, 34'
	$labelExplanation.TabIndex = 2
	$labelExplanation.Text = '*Uses regular expressions to only find words that match. This option is optional.'
	$labelExplanation.UseWaitCursor = $True
	#
	# labelFilter
	#
	$labelFilter.Anchor = 'Top'
	$labelFilter.Font = 'Microsoft Sans Serif, 10pt'
	$labelFilter.Location = '59, 89'
	$labelFilter.Margin = '4, 4, 4, 4'
	$labelFilter.Name = 'labelFilter'
	$labelFilter.Size = '57, 18'
	$labelFilter.TabIndex = 1
	$labelFilter.Text = 'Filter:'
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.Location = '239, 344'
	$buttonOK.Margin = '4, 4, 4, 4'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '100, 30'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click({
			if ($combobox.SelectedIndex -ne -1)
			{
				$global:comboboxval = $combobox.SelectedItem.ToString()
			}
			else
			{
				$global:comboboxval = ""
			}
			$count = $global:reportList.count
			$global:filterval = $Filter.Text
			if ($global:searchstate)
			{
				$count = $global:searchList.count
				$global:histogram = @{ }
				$global:histogram = generate-histogram -filter $global:filterval -field $global:comboboxval -array $global:searchList
			}
			else
			{
				$global:histogram = @{ }
				$global:histogram = generate-histogram -filter $global:filterval -field $global:comboboxval -array $global:reportList
			}
			if ($global:histogram -ne $null -and $global:histogram.count -ne 0)
			{
				$global:histogram = $global:histogram.getEnumerator() | Sort-Object -Property value -Descending
				
				for ($i = 0; $i -lt 5; $i++)
				{
					$key = $global:histogram[$i].name
					$value = $global:histogram[$i].value
					if ($i -eq 0)
					{
						$labelkey1.Text = $key
						$labelval1.Text = [System.Convert]::ToString([math]::Round($value * 100/$count,1)) + "%"
					}
					if ($i -eq 1)
					{
						$labelkey2.Text = $key
						$labelval2.Text = [System.Convert]::ToString([math]::Round($value * 100/$count, 1)) + "%"
					}
					if ($i -eq 2)
					{
						$labelkey3.Text = $key
						$labelval3.Text = [System.Convert]::ToString([math]::Round($value * 100/$count, 1)) + "%"
					}
					if ($i -eq 3)
					{
						$labelkey4.Text = $key
						$labelval4.Text = [System.Convert]::ToString([math]::Round($value * 100/$count, 1)) + "%"
					}
					if ($i -eq 4)
					{
						$labelkey5.Text = $key
						$labelval5.Text = [System.Convert]::ToString([math]::Round($value * 100/$count, 1)) + "%"
					}
				}
			}
			else
			{
				$labelval1.Text = '0'
				$labelval2.Text = '0'
				$labelval3.Text = '0'
				$labelval4.Text = '0'
				$labelval5.Text = '0'
				$labelkey1.Text = 'Example1'
				$labelkey2.Text = 'Example2'
				$labelkey3.Text = 'Example3'
				$labelkey4.Text = 'Example4'
				$labelkey5.Text = 'Example5'
			}
			
		})
	#
	# labelField
	#
	$labelField.Anchor = 'Top'
	$labelField.Font = 'Microsoft Sans Serif, 10pt'
	$labelField.Location = '59, 42'
	$labelField.Margin = '4, 4, 4, 4'
	$labelField.Name = 'labelField'
	$labelField.Size = '57, 18'
	$labelField.TabIndex = 0
	$labelField.Text = 'Field:'
	#
	# combobox
	#
	$combobox.AutoCompleteMode = 'Suggest'
	$combobox.Location = '124, 41'
	$combobox.Margin = '4, 4, 4, 4'
	$combobox.Name = 'combobox'
	$combobox.Size = '226, 25'
	$combobox.TabIndex = 0
	
	$combobox.DropDownStyle =
	[System.Windows.Forms.ComboBoxStyle]::DropDownList;
	$combobox.items.add("Incident")
	$combobox.items.add("Location")
	$combobox.items.add("Reported")
	$combobox.items.add("Occurred")
	$combobox.SelectedIndex = 0
	#
	# Filter
	#
	$Filter.Anchor = 'Top'
	$Filter.Location = '124, 88'
	$Filter.Margin = '4, 4, 4, 4'
	$Filter.Name = 'Filter'
	$Filter.Size = '226, 23'
	$Filter.TabIndex = 0
	
	$formGenerateHistogram.add_Closing({
			$labelval1.Text = '0'
			$labelval2.Text = '0'
			$labelval3.Text = '0'
			$labelval4.Text = '0'
			$labelval5.Text = '0'
			$labelkey1.Text = 'Example1'
			$labelkey2.Text = 'Example2'
			$labelkey3.Text = 'Example3'
			$labelkey4.Text = 'Example4'
			$labelkey5.Text = 'Example5'
			$global:histogram = @{}
		})
	#endregion
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$global:ScriptDirectory = Get-ScriptDirectory
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$buttonGenerateHistogram = New-Object 'System.Windows.Forms.Button'
	$sizeLabel = New-Object 'System.Windows.Forms.Label'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$buttonLoad = New-Object 'System.Windows.Forms.Button'
	$buttonSave = New-Object 'System.Windows.Forms.Button'
	$buttonUpdate = New-Object 'System.Windows.Forms.Button'
	$buttonExport = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonAddRow = New-Object 'System.Windows.Forms.Button'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				[System.Windows.Forms.DataGridView]$DataGridView,
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				$Item,
				[Parameter(Mandatory = $false)]
				[string]$DataMember,
				[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeRows = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
				-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		$DataGridView.Columns[0].Visible = $false
		$DataGridView.Columns[0].Width = 50;
		$DataGridView.Columns[1].Width = 75;
		$DataGridView.Columns[2].Width = 150;
		$DataGridView.Columns[3].Width = 150;
		$DataGridView.Columns[4].Width = 125;
		$DataGridView.Columns[5].Width = 185;
		$DataGridView.Columns[6].Width = 100;
		$DataGridView.Columns[7].Width = 225;
		$DataGridView.Columns[8].Width = 75;
		
		if ($AutoSizeRows -ne 'None')
		{
			$DataGridView.AutoResizeRows($AutoSizeRows)
		}
		
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
				[ValidateNotNull()]
				$InputObject,
				[ValidateNotNull()]
				[System.Data.DataTable]$Table,
				[switch]$RetainColumns,
				[switch]$FilterWMIProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			#[void][System.Windows.Forms.MessageBox]::Show($InputObject.getType(), "String not Found")
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				
				
				[void]$table.Columns.Add("Index")
				[void]$table.Columns.Add("Report #")
				[void]$table.Columns.Add("Incident")
				[void]$table.Columns.Add("Location")
				[void]$table.Columns.Add("Reported")
				[void]$table.Columns.Add("Occurred")
				[void]$table.Columns.Add("Disposition")
				[void]$table.Columns.Add("Summary")
				[void]$table.Columns.Add("File")
				
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($key in $item.keys)
					{
						if ($table.Columns.Contains($key))
						{
							$row.Item($key) = $item[$key]
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		return @( ,$Table)
	}
	#endregion
	
	#region Search Function
	function SearchGrid()
	{
		
		$RowIndex = 0
		$ColumnIndex = 0
		$input = $textboxSearch.Text
		$tempSearchList = $global:reportList
		$searchDataTable = New-Object System.Data.DataTable
		$searched = $false
		$searchKey=""
		if ($input -match ",")
		{
			$input = $input -split ","
		}
		foreach ($searchString in $input)
		{
			$searchKey=""
			$searchString = $searchString.trim()
			if ($searchString -match ":")
			{
				$searchKey = $searchString -split ':'
				$searchString = $searchKey[1]
				$searchKey = $searchKey[0]
				$searchKey = $searchKey.trim()
				$searchString = $searchString.trim()
			}
			if (($searchString -eq $null) -or (-not ($searchString -match "\w")))
			{
				continue
			}
			if ($searchKey -ne "" -and (-not ($global:reportList[0].keys -contains $searchKey)))
			{
				[void][System.Windows.Forms.MessageBox]::Show("An invalid field value has been provided.", "Invalid search parameters")
				return
			}
			
			$tempsearchList = searchReport -array $tempsearchList -field $searchKey -value $searchString
			$searched = $true
		}
		
		if ($searched -eq $false)
		{
			if ($global:editedsearch -eq $true)
			{
				$sizeLabel.Text = "Size: " + $global:reportList.count
				ConvertTo-DataTable -Table $global:mainDataTable -InputObject $global:reportList -RetainColumns
				$global:editedsearch = $false
			}
			$global:searchstate = $false
			Load-DataGridView -DataGridView $datagridviewResults -Item $global:mainDataTable
			return
		}
		
		if ($global:searchList -ne $null -or $global:searchList.count -ne 0)
		{
			$global:searchList.clear()
		}
		
		if ($tempsearchList -ne $null)
		{
			$global:searchList = $tempsearchList
			$global:searchstate = $true
			$sizeLabel.Text = "Size: " + $global:searchList.count
			ConvertTo-DataTable -InputObject $global:searchList -Table $searchDataTable
			Load-DataGridView -DataGridView $datagridviewResults -Item $searchDataTable
		}
		else
		{
			$response = [System.Windows.forms.MessageBox]::Show("Search results returned nothing.", "Search results")
		}
	}
	#endregion
	$formMain_Load={
		#TODO: Initialize Form Controls here
		$buttonGenerateHistogram.Enabled = $false
		$buttonSave.Enabled = $false
		$buttonAddRow.Enabled = $false
		$buttonExport.Enabled = $false
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
	
		$formMain.Close()
	}
	
	$buttonSearch_Click={
		#TODO: Place custom script here
		if ($global:datasetFile -ne "")
		{
			SearchGrid
		}
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
		
	}
	
	$formMain_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#Stop any pending jobs
		
		Stop-JobTracker
	}
	
	$timerJobTracker_Tick={
		Update-JobTracker
	}
	
	#region Job Tracker
	$JobTrackerList = New-Object System.Collections.ArrayList
	function Add-JobTracker
	{
		<#
			.SYNOPSIS
				Add a new job to the JobTracker and starts the timer.
		
			.DESCRIPTION
				Add a new job to the JobTracker and starts the timer.
		
			.PARAMETER  Name
				The name to assign to the Job
		
			.PARAMETER  JobScript
				The script block that the Job will be performing. 
				Important: Do not access form controls from this script block.
		
			.PARAMETER ArgumentList
				The arguments to pass to the job
		
			.PARAMETER  CompleteScript
				The script block that will be called when the job is complete.
				The job is passed as an argument. The Job argument is null when the job fails.
		
			.PARAMETER  UpdateScript
				The script block that will be called each time the timer ticks. 
				The job is passed as an argument. Use this to get the Job's progress.
		
			.EXAMPLE
				Add-JobTracker -Name 'JobName' `
				-JobScript {	
					Param($Argument1)#Pass any arguments using the ArgumentList parameter
					#Important: Do not access form controls from this script block.
					Get-WmiObject Win32_Process -Namespace "root\CIMV2"
				}`
				-CompletedScript {
					Param($Job)		
					$results = Receive-Job -Job $Job		
				}`
				-UpdateScript {
					Param($Job)
					#$results = Receive-Job -Job $Job -Keep
				}
		
			.LINK
				
		#>
		
		Param(
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[string]$Name, 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[ScriptBlock]$JobScript,
		$ArgumentList = $null,
		[ScriptBlock]$CompletedScript,
		[ScriptBlock]$UpdateScript)
		
		#Start the Job
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if($null -ne $job)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{	'Job' = $Job;
							'CompleteScript' = $CompletedScript;
							'UpdateScript' = $UpdateScript}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)	
			
			#Start the Timer
			if(-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
	
	}
	
	function Update-JobTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerJobTracker.Stop() #Freeze the Timer
		
		for($index =0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if($null -ne $psObject) 
			{
				if($null -ne $psObject.Job)
				{
					if($psObject.Job.State -ne "Running")
					{				
						#Call the Complete Script Block
						if($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start()#Resume the timer	
		}	
	}
	
	function Stop-JobTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all Jobs from the list.
		#>
		#Stop the timer
		$timerJobTracker.Stop()
		
		#Remove all the jobs
		while($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	#endregion
	
	$buttonGenerateHistogram_Click = {
		if ($global:datasetFile -ne "")
		{
			$histogram = @{ }
			$minihistogram = @{ }
			$formGenerateHistogram.showDialog()
		}
		else
		{
			[System.Windows.forms.MessageBox]::Show("Please load a file before generating histograms.", "Error")
		}
		
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
		{
			SearchGrid	
			$_.SuppressKeyPress = $true
		}
	}
	
	$datagridviewResults_CellContentDoubleClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here	
		
		$columns = $datagridviewResults.Columns
		if ($columns[$_.ColumnIndex].name -eq "file")
		{
			$value = $datagridviewResults.CurrentCell.Value
			$value=$value -replace ".txt", ".pdf"
			$month = $value.substring(0, 2)
			$year = $value.substring(4, 2)
			Invoke-Expression "cmd.exe /C start http://dps.usc.edu/files/20$year/$month/$value"
		}
		
		
	}
	
	$datagridviewResults_CellEndEdit=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		
		$field = $datagridviewResults.Columns[$_.ColumnIndex].name
		[int]$index = [System.Convert]::ToInt32($datagridviewResults.Rows[$_.RowIndex].Cells[0].Value)
		
		$value = $datagridviewResults.Rows[$_.RowIndex].Cells[$_.ColumnIndex].Value
		if ([string]::Compare($value,$global:reportList[$index].$field))
		{
			$global:changed = $true
			if ($global:searchstate -eq $true)
			{
				$failed=$false
				$global:editedsearch = $true
				$global:searchList[$_.RowIndex].$field = $value
			}
			$global:reportList[$index].$field = $value
		}
		
		
	}
	
	$buttonExport_Click={
		#TODO: Place custom script here
		if ($global:datasetFile -ne "")
		{
			[System.Windows.Forms.SaveFileDialog]$filedialog = New-Object System.Windows.Forms.SaveFileDialog
			
			if ($global:exportdirectory -eq "")
			{
				$filedialog.InitialDirectory = "$ScriptDirectory\data"
			}
			else
			{
				$filedialog.InitialDirectory = $global:exportdirectory
			}
			$filedialog.Title = "Export Dataset"
			$filedialog.CheckFileExists = $false
			$filedialog.CheckPathExists = $true
			$filedialog.AddExtension = $true
			$filedialog.DefaultExt = ".dps"
			$filedialog.Filter = "DPS File (*.dps)|*.dps"
			$output = $filedialog.ShowDialog()
			if ($filedialog.filename -eq "")
			{
				return
			}
			else
			{
				if ($global:searchstate)
				{
					write-reports -array $global:searchList -path $filedialog.FileName
				}
				else
				{
					write-reports -array $global:reportList -path $filedialog.FileName
				}
			}
			$filePath = $filedialog.FileName
			$fileDir = $filePath.Split(0,$filePath.LastIndexOf("\"))
			if ($global:exportdirectory -ne $fileDir)
			{
				$global:exportdirectory= $fileDir
			}
		}
		else
		{
			[System.Windows.forms.MessageBox]::Show("Please load a file before exporting reports.", "Error")
		}
	}
	
	$buttonLoad_Click= {
		#TODO: Place custom script here
		if ($global:changed -eq $true)
		{
			$response = [System.Windows.forms.MessageBox]::Show('Would you like to save the changes made to the original dataset?', 'Save Reports', 'YesNoCancel')
			if ($response.ToString() -eq "Yes")
			{
				write-reports -array $global:reportList -path $global:datasetFile
			}
		}
		[System.Windows.Forms.OpenFileDialog]$filedialog = New-Object System.Windows.Forms.OpenFileDialog
		if ($global:loaddirectory -eq "")
		{
			$filedialog.InitialDirectory = "$ScriptDirectory\data"
		}
		else
		{
			$filedialog.InitialDirectory = $global:loaddirectory
		}
		$filedialog.Title = "Load Dataset"
		$filedialog.CheckFileExists = $true
		$filedialog.Multiselect = $false
		$filedialog.Filter = "DPS files (*.dps)|*.dps"
		$filedialog.ShowDialog()
		if ($buttonUpdate.Text -eq "Updating...")
		{
			
			$filename = $filedialog.FileName
			$filename = $filename.substring($filename.LastIndexOf("\"))
			$text= $buttonUpdate.Text
			while ($filename -eq "\MainDataset.dps" -and $buttonUpdate.Text -eq "Updating...")
			{
				[System.Windows.forms.MessageBox]::Show('Unable to load MainDataset while updating. Please try again.', 'Load Dataset')
				$filedialog.ShowDialog()
				$filename = $filedialog.FileName
				$filename = $filename.substring($filename.LastIndexOf("\"))
			}
		}
		if ($filedialog.filename -eq "")
		{
			return
		}
		else
		{
			
			if ($global:reportList -ne $null)
			{
				$global:reportList.clear()
			}
			if ($global:mainDataTable -ne $null)
			{
				$global:mainDataTable.clear()	
			}
			$global:datasetFile = $filedialog.FileName
			read-Reports -array $global:reportList -path $global:datasetFile
			
			$title = $global:datasetFile.Split("\")
			$title = $title[$title.Length - 1]
			$formMain.Text = "ReportSC: "+$title
			
			$global:changed = $false
			$global:searchstate = $false
			$sizeLabel.Text = "Size: " + $global:reportList.count
			
			$buttonGenerateHistogram.Enabled = $true
			$buttonSave.Enabled = $true
			$buttonExport.Enabled = $true
			$buttonAddRow.Enabled = $true
			
			ConvertTo-DataTable -InputObject $global:reportList -Table $global:mainDataTable -RetainColumns
			Load-DataGridView -DataGridView $datagridviewResults -Item $global:mainDataTable
		}
		$filePath = $filedialog.FileName
		$fileDir = $filePath.Split(0, $filePath.LastIndexOf("\"))
		if ($global:loaddirectory -ne $fileDir)
		{
			$global:loaddirectory = $fileDir
		}
	}
	
	$datagridviewResults_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		
	}
	
	$datagridviewResults_KeyPress=[System.Windows.Forms.KeyPressEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyPressEventArgs]
		#TODO: Place custom script here
		$report = New-Object System.Collections.ArrayList
		$selectedCells = $datagridviewResults.SelectedCells
		
		if ($_.KeyChar.CompareTo([char]'v') -eq 0 -or $_.KeyChar.CompareTo([char]'V') -eq 0)
		{
			if ($selectedCells.count -eq 1 -and $datagridviewResults.CurrentCell -ne $null -and -not $datagridviewResults.CurrentCell.IsInEditMode)
			{
				$columns = $datagridviewResults.Columns
				$currentCell = $datagridviewResults.CurrentCell
				
				$value = $datagridviewResults.CurrentCell.Value
				$reportIndex = $columns["Report #"].Index
				$currentRowIndex = $currentCell.RowIndex
				$reportValue = $datagridviewResults.Rows[$currentRowIndex].Cells[$reportIndex].Value
				[System.Windows.forms.MessageBox]::Show("$value", "Report: " + $reportValue)
				
			}
			if ($selectedCells.Count -eq 9)
			{
				for ($i=1; $i -lt $selectedCells.Count; $i++)
				{
					$report.add($selectedCells[$i].Value)
					if ($selectedCells[$i].RowIndex -ne $selectedCells[$i - 1].RowIndex)
					{
						return
					}
				}
				
				$global:reportDialog.Text = "Report " + $report[0]
				$global:reportDialogLabel1.Text = "Incident: " + $report[1] 
				$global:reportDialogLabel2.Text = "Location: " + $report[2] 
				$global:reportDialogLabel3.Text = "Reported: " + $report[3] 
				$global:reportDialogLabel4.Text = "Occurred: " + $report[4]
				$global:reportDialogLabel5.Text = "Disposition: " + $report[5]
				$global:reportDialogLabel6.Text = "Summary: " + $report[6] 
				$global:reportDialog.showDialog()
				
			}
			
		}
	} #error with show summary
	
	$buttonAddRow_Click={
		#TODO: Place custom script here
		if ($global:datasetFile -ne "")
		{
			$global:addDialogField1.text = ""
			$global:addDialogField2.text = ""
			$global:addDialogField3.text = ""
			$global:addDialogField4.text = ""
			$global:addDialogField5.text = ""
			$global:addDialogField6.text = ""
			$global:addDialogField7.text = ""
			$global:addDialogField8.text = ""
			$global:addDialog.ShowDialog()
			$sizelabel.Text = "Size: " + $datagridviewResults.RowCount
		}
		else
		{
			[System.Windows.forms.MessageBox]::Show("Please load a file before adding reports.", "Error")
		}
	}
	
	$datagridviewResults_UserDeletingRow=[System.Windows.Forms.DataGridViewRowCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewRowCancelEventArgs]
		#TODO: Place custom script here
		
		$response = [System.Windows.forms.MessageBox]::Show("Are you sure you wish to delete this row?", "Delete Row", 'YesNoCancel')
		if ($response.ToString().Equals("Yes"))
		{
			[int]$index = [System.Convert]::ToInt32($_.Row.Cells[0].Value)
			if ($global:searchstate -eq $true)
			{
				$global:editedsearch = $true
			}
			$global:reportList.removeAt($index)
			$global:changed = $true
			
			foreach ($row in $datagridviewResults.Rows)
			{
				$currindex = [System.Convert]::ToInt32($row.Cells[0].Value)
				if ( $currindex -gt $index)
				{
					$row.Cells[0].Value = $currindex - 1
				}
			}
			
			for ($index; $index -lt $global:reportList.count; $index++)
			{
				$newindex= [System.Convert]::ToInt32($global:reportList[$index]."Index") - 1
				$global:reportList[$index]."Index" = $newindex
			}
			
			$datagridviewResults.Refresh()
			$sizeLabel.Text = "Size: " + ($datagridviewResults.RowCount-1)
			
		}
		else
		{
			$_.Cancel = $true
		}
		
	}
	
	$formMain_FormClosing=[System.Windows.Forms.FormClosingEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		#TODO: Place custom script here
		if ($global:changed -eq $true)
		{
			$response = [System.Windows.forms.MessageBox]::Show('Would you like to save the changes made to the original dataset?', 'Save Reports', 'YesNoCancel')
			if ($response.ToString() -eq "Yes")
			{
				write-reports -array $global:reportList -path $global:datasetFile
				$global:changed = $false
			}
			if ($response.ToString() -eq "Cancel")
			{
				$_.Cancel = $true
			}
		}
	}
	
	$buttonSave_Click={
		#TODO: Place custom script here
		$buttonSave.Enabled = $false
		$buttonExport.Enabled = $false
		$buttonExit.Enabled = $false
		$buttonSave.Text = "Saving..."
		#Create a New Job using the Job Tracker
		Add-JobTracker -Name 'Save' -ArgumentList $global:reportList, $global:datasetFile, $ScriptDirectory\bin\ReportIO.ps1 `
		-JobScript {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.
			try
			{
				. $args[2]
				write-reports -array $args[0] -path $args[1]
				
			}
			catch
			{
				Write-Output $_.Exception.Message | Out-File C:\Users\YutongGu\Desktop\Powershell\DPSReportLog\data\error.txt
				
			}
		}`
		-CompletedScript {
			Param ($Job)
			
			#$results = Receive-Job -Job $Job 
			#$results = ConvertTo-DataTable -InputObject $results -FilterWMIProperties
			#Load-DataGridView -DataGridView $datagridviewResults -Item $results -AutoSizeColumns DisplayedCells
			
			#Enable the Button
			[System.Windows.forms.MessageBox]::Show('Dataset successfully saved', 'Save Reports')
			$buttonSave.ImageIndex = -1
			$buttonSave.Enabled = $true
			$buttonExport.Enabled = $true
			$buttonExit.Enabled = $true
			$global:changed = $false
			$buttonSave.Text= "&Save"
		}`
		-UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			#Animate the Button
		}
	}
	
	$buttonUpdate_Click={
		#TODO: Place custom script here
		$currentDataset = ""
		if ($global:datasetFile -ne "")
		{
			$currentDataset = $global:datasetFile.split($global:datasetFile.lastIndexOf("\"))
		}
		if ($currentDataset -eq "\MainDataset.dps" -and $global:changed -eq $true)
		{
			$response = [System.Windows.forms.MessageBox]::Show('Would you like to save changes made toMainDataset?', 'Update Reports', 'YesNo')
			if ($response.ToString() -eq "Yes")
			{
				write-reports -array $global:reportList -path $global:ScriptDirectory
			}
		}
		$buttonUpdate.Enabled = $false
		$buttonExit.Enabled = $false
		$buttonUpdate.Text= "Updating..."
		[System.Windows.forms.MessageBox]::Show('Checking for updates...', 'Update Reports')
		#Create a New Job using the Job Tracker
		Add-JobTracker -Name 'Update' -ArgumentList $ScriptDirectory `
		-JobScript {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.
			try
			{
				$response = @(0, 0)
				$path1 = $args[0] + "\bin\DPSCrimeLogGrabber.ps1"
				$path2 = $args[0] + "\bin\UpdateDataset.ps1"
				$path3 = $args[0] + "\bin\ReportIO.ps1"
				$path4 = $args[0] + "\bin\DPSTextParser.ps1"
				. $path1
				. $path2
				. $path3
				. $path4
				$isConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]'{DCB00C01-570F-4A9B-8D69-199FDBA5723B}')).IsConnectedToInternet
				if ($isConnected)
				{
					$response[0] = update-logs -projectpath $args[0] -option 1
				}
				else
				{
					$response[0] = -1
				}
				$response[1] = update-dataset -projectpath $args[0] -datasetname "MainDataset.dps"
				if ($response[1] -eq 1)
				{
					$path5 = $args[0] + "\data\MainDataset.dps"
					$path6 = $args[0] + "\backup\MainDataset.dps"
					Copy-Item $path5 $path6
				}
				return $response
			}
			catch
			{
				Write-Output $_.Exception.Message | Out-File C:\Users\YutongGu\Desktop\Powershell\DPSReportLog\data\error.txt
				
			}
		}`
		-CompletedScript {
			Param ($Job)
			
			#$results = Receive-Job -Job $Job 
			#$results = ConvertTo-DataTable -InputObject $results -FilterWMIProperties
			#Load-DataGridView -DataGridView $datagridviewResults -Item $results -AutoSizeColumns DisplayedCells
			#Enable the Button
			$results = Receive-Job -Job $Job
			#[System.Windows.forms.MessageBox]::Show($results[0], 'Update Reports')
			if ($results[0] -eq 0)
			{
				if ($results[1] -eq 0)
				{
					[System.Windows.forms.MessageBox]::Show('Everything is up-to-date.', 'Update Reports')
				}
				elseif ($results[1] -eq 1)
				{
					[System.Windows.forms.MessageBox]::Show('MainDataset updated.', 'Update Reports')
				}
				
			}
			elseif ($results[0] -eq 0)
			{
				if ($results[1] -eq 0)
				{
					[System.Windows.forms.MessageBox]::Show('Logs updated.', 'Update Reports')
				}
				else
				{
					[System.Windows.forms.MessageBox]::Show('Logs and MainDataset updated.', 'Update Reports')
					
				}
			}
			else
			{
				if ($results[1] -eq 0)
				{
					[System.Windows.forms.MessageBox]::Show('No internet connection detected. Unable to check for updates on logs. No changes were made.', 'Update Reports')
				}
				else
				{
					[System.Windows.forms.MessageBox]::Show('No internet connection detected. Unable to check for updates on logs. MainDataset updated.', 'Update Reports')
					
				}
			}
			$currentDataset = ""
			if ($global:datasetFile -ne "")
			{
				$currentDataset = $global:datasetFile.split($global:datasetFile.lastIndexOf("\"))
			}
			if ($results[1] -eq 1 -and $currentDataset -eq "\MainDataset.dps")
			{
				$response = [System.Windows.forms.MessageBox]::Show('Would you like to reload MainDataset?', 'Update Reports', 'YesNo')
				if ($response.ToString() -eq "Yes")
				{
					read-Reports -array $global:reportList -path $global:datasetFile
					ConvertTo-DataTable -InputObject $global:reportList -Table $global:mainDataTable -RetainColumns
					Load-DataGridView -DataGridView $datagridviewResults -Item $global:mainDataTable
				}	
			}
			$buttonUpdate.ImageIndex = -1
			$buttonUpdate.Enabled = $true
			$buttonExit.Enabled = $true
			$buttonUpdate.Text = "&Update"
			$global:changed = $false
		}`
		-UpdateScript {
			Param ($Job)
		}
			
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxSearch = $textboxSearch.Text
		$script:MainForm_datagridviewResults = $datagridviewResults.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonGenerateHistogram.remove_Click($buttonGenerateHistogram_Click)
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$datagridviewResults.remove_CellContentClick($datagridviewResults_CellContentClick)
			$datagridviewResults.remove_CellContentDoubleClick($datagridviewResults_CellContentDoubleClick)
			$datagridviewResults.remove_CellEndEdit($datagridviewResults_CellEndEdit)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$datagridviewResults.remove_UserDeletingRow($datagridviewResults_UserDeletingRow)
			$datagridviewResults.remove_KeyPress($datagridviewResults_KeyPress)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$buttonLoad.remove_Click($buttonLoad_Click)
			$buttonSave.remove_Click($buttonSave_Click)
			$buttonUpdate.remove_Click($buttonUpdate_Click)
			$buttonExport.remove_Click($buttonExport_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonAddRow.remove_Click($buttonAddRow_Click)
			$formMain.remove_FormClosing($formMain_FormClosing)
			$formMain.remove_FormClosed($formMain_FormClosed)
			$formMain.remove_Load($formMain_Load)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_Closing($Form_StoreValues_Closing)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($buttonGenerateHistogram)
	$formMain.Controls.Add($sizeLabel)
	$formMain.Controls.Add($textboxSearch)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonSearch)
	$formMain.Controls.Add($buttonLoad)
	$formMain.Controls.Add($buttonSave)
	$formMain.Controls.Add($buttonUpdate)
	$formMain.Controls.Add($buttonExport)
	$formMain.Controls.Add($buttonExit)
	$formMain.Controls.Add($buttonAddRow)
	$formMain.AutoScaleDimensions = '8, 17'
	$formMain.AutoScaleMode = 'Font'
	$formMain.ClientSize = '1182, 703'
	$formMain.ForeColor = 'Black'
	#region Binary Data
	$formMain.Icon = [System.Convert]::FromBase64String('
AAABAAEAMjIAAAEAIADIKAAAFgAAACgAAAAyAAAAZAAAAAEAIAAAAAAAECcAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYAAwNpAC0plgADKZYAAANpAAAAZgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAzKzMAMCg2AAMCZgD//wAAMytmGQICdicAA0DyBSlk8QYrZg4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAMyszADMoMwAzAzMAMwAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAMyuZAP///wADA2Ug
MSuWIgMrliIAA2kgAAD/AAMAZgAwADYAGQAzAAAANgADAmMALSZpAAAA/wA0Ky8gAwNiIg0Lii4p
I3HpAgKW9QICk/4oI2jxMixnDDAABgAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAAaQAAAP8ANygmKzcAJisAqv8AAAOZ
AAAAmQAAAAAAAAAAAAAAAAA3Lp0DKSOSNgMDc+8lIZf6AiCV+gABaO8AAIc5AwBeLjQAKStNAAAC
AAApKwMAVy4xKWUuDQuFOSchSe8CAm/6AACX+wEBj/8AAJj/AACO/wEAcfMDAFo5NAAAKwAA/wAw
AGYAMwBmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMA
ZgC9FH4AAABgNggAgkUnJlX0JxJV9AgYhEUAAJA2ACiZAAAAOQAAADMAAAAAACYhjQ4kH43xAgKN
/wABmf8AFKT/ABaD/wAeof8CFX//JRZb9AdjpVAAIVv0AiCH/yMedP8CAIv/AACZ/wAAmP8AAIz/
AAB2/wAAlf8ABnT/AAyW/wIlhv8lAir0CwBURTQAWTYAIHkAMAA2ADMAMwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKwAAAJgAAC0EaE0BF4P4AEW0/wBb2v8Adtr/AFu3/wA7
tPgAAJJSAAAwQ7UASgAzADMADwBoDg4AafEBAHX/AAOZ/wA7rv8AQLD/AFe8/wA9r/8ASLz/AFi8
/wBZvv8AVM7/AA+a/wAWhf8AAYr/AACX/wAAd/8AAIn/AAKL/wBVs/8AJp7/AHvb/wATnf8CAHb/
IiyP+AkCZFI0AChDAJT/AAADbAAAAGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwBmAL0A/wAF
JwhaIAh6+wKA2/8A8P//ANv//wDX//8Ay///ANH9/wBXuP8BAFj7LgAxWjcAKgUiD0IPIA5H9wIB
lP8AAIf/AAB3/wAAef8AJ6X/ADea/wBQuP8AN7r/AEW4/wBRmf8AOqn/AFC3/wACef8AAIj/AACX
/wACev8ALYv/AKLo/wA1r/8ANaj/ACCc/wBJvf8Alur/AiCK/yAmZ/sFGbNfAABkUL0UAAAzADMA
AAAAAAAAAAAAAAAAAAAAAAAAZgAAAHQAMANcZwESPv0ADZv/AN/8/wDE//8A1P//ANX//wC///8A
2f//AOr9/wJGrv8eBF/3PwCABwAwAAgAKQqYAACT+QAAe/8AAIT/AAeJ/wBzzv8AvP//AL///wDA
//8AzP//AO7//wCL4P8AUa3/ADSr/wAAaf8AAJb/AAiK/wCn3f8AOLn/AE24/wBEuf8AGp7/ANv5
/wBVvP8AmOD/AKLk/wB62/8BI479LwQ8ZzcALwYAAAAAAAAAAAAAAAAAAAAAAABiBgQAZXUaAH3/
AlTE/wAanf8Ar+b/ANH//wDY//8Ax///ALTr/wCj7f8A2P//AM/k/wALnvcAADx0AAAzBjQA/wcX
FIXwAQGY/wAAf/8AA3//ADS3/wDM+/8A2P//ANT+/wCw6/8A0v7/ANb//wCi4/8ASrT/ADuW/wAF
hP8AKJX/ALrj/wAbnP8AIaz/ABqE/wB3xf8ArOT/AFW1/wDU/P8A2v//AOv//wKB4v8aB1P/HABK
DwAAAAAAAAAAAAAAADMrMwAAANAHAAWC+ABrzf8A1P3/AJbO/wAys/8AzuT/AJfk/wBUtP8APK//
ACqZ/wBpy/8AouP/AiCZ/xkXUfkbF0wPGRVKDhgUT/EBAZP/AACC/wAAmP8AC4b/AN34/wDC//8A
z/z/AIrS/wDQ/P8A1f//AND+/wBWzf8APbH/AAxv/wCh3f8AQpv/AESz/wBCtP8AMJ7/AMv7/wBH
tf8Aveb/AL/+/wDU//8A0v7/AHHQ+AAMdX0AAGoHAAAAAAAAAAAAAAAANi0wCDErPo8CI7j5AOb+
/wDC//8A/f//ADq5/wBDr/8AIKn/AABn/wAAlP8AAIH/AAB7/wAcq/8BFJf/FRNr8RYTaA4cGDEP
GhY3+AIBkv8AAIX/AACV/wAMcP8Axfb/AMP//wDL+v8ASrb/AM76/wDU//8AxP//ANb+/wA1tv8A
H4r/AML1/wAKi/8AIqz/ABmB/wCu5P8Aj8j/AHfT/wDS/v8A1f//ANH9/wCJ3P8AFmPwAB9PBwAA
ZgAAAAAAAAAAAAAAAAATEVIPEhVZ+AFkyf8A3vz/ANj7/wBnw/8Absr/AAJ9/wAAlf8AAIf/AAB6
/wAAl/8AAIb/AAB5/wIAlP8eGWrxIBtnDjcvMwUvKEJjAQGV9gAAff8AAJT/AAhx/wCK+f8A0v//
AMz7/wBRv/8At/z/ANL//wC+//8A3Pz/AGTS/wCQ2f8APr7/AAN9/wAAef8AN6b/ANj4/wAvof8A
1/z/AML//wDw//8A0vz/AlTF/x8DOfchADAPAAAAAAAAAAAAAAAAAAAAACMAZg4hB2zxAoLK/wDR
/P8A2Pr/AAmb/wAlh/8AAoj/AACX/wAAef8AAIj/AACX/wAAef8AAIj/AQGT/xANSfERDkQOHRlJ
AAAA/wMAAJnwAACK/wAAlP8AA2z/AGK4/wDT/f8A8P7/AJfT/wB43v8Az/7/AMr//wDn+/8ASLL/
AKz3/wAGfP8AAIf/AAmN/wC76f8AZr3/AF2//wDW+f8AdNv/AG69/wCU+f8BWc31Lg5MVjcAMwQA
AAAAAAAAAAAAAAAzAGYACACSDA4BjfEBJqn/AKz4/wCP2P8ACJr/AABp/wAAlf8AAHb/AACK/wAA
l/8AAHb/AACK/wAAmf8AApH/AB0U8wAfDA4AAH4IAABntgAAcvsAAnf/ADy5/wBbsv8AVLv/AFWz
/wBCsP8ALIT/AB2l/wCt2f8AtPz/AIba/wCEvv8AS7L/AASM/wAFef8AYL//ANL1/wAcgP8AnOz/
AM7+/wCW8f8AouL/AJXX/wAeqfEAIugJMwAzAAAAAAAAAAAAAAAAADMAZgwvA2rBASud/AC44/8A
bNX/AFil/wAFmf8AAI//AACY/wAAjP8AAHb/AACW/wAAjP8AAHb/AgCX/yUBl/QJJCA+KCwADi8o
C8ECAof/AAqS/wCg2/8Au/T/AMT2/wC69P8Arun/AKbn/wDA3v8Ah+b/AGjL/wBisP8AH6j/ALjr
/wASmv8AA3b/ACyS/wDR6/8ANK7/AAxz/wCk9/8A0v//AM7//wDY//8A4O7/ACyd8QQeiw8zAAAA
AAAAAAAAAAAAAAAACQCQDwgLlvQAser/AN3//wDU8P8AGJv/AAFz/wAAlf8AAHT/AACW/wAAj/8A
AHT/AACW/wAAj/8AAHT/CAGX8QsAwAsJB1cOCAda9AAOnf8ArOv/ANb//wDW//8A1v//ANT//wC4
//8A1P//AL///wDO//8Av/f/AJjp/wBsxf8ASKr/AEWd/wA1vf8AyOn/AHfU/wBQov8AruP/AM3+
/wDT//8Ar/n/AG2x/wAyqv8CDnD9LgIOzDIBBgwAAAAAAAAAAAAAAAAAAG0aAA2f8gDM+v8A0/z/
AKbQ/wAJmf8AAG3/AACU/wAAkf8AAHP/AACU/wAAkf8AAHP/AACU/wACk/8AIpnxAiKYDxYCgBkA
DJnyAJbu/wDs/f8AzPj/ALX//wDP//8Atf//AM7//wDT//8A0P//ANX//wDs+/8AT7L/ALTp/wAX
fP8AYMb/AMvu/wBbs/8AnvT/AMP0/wDV//8A1P//ANH9/wCQ2f8AwvD/ANfx/wC06f8GMLXzBBZ7
GQAAMwEAAAAAAAAAAAQAOusADpn+AOz5/wDM+v8AHqL/AAGZ/wAAj/8AAHP/AACW/wAAj/8AAHP/
AACW/wAAj/8AAHL/AACT/wAEmPIOAWMsLAZu3wJbo/4A1vD/AGHH/wAphv8Axfj/ALT//wDQ//8A
0f//ALX//wDS//8AuP//AMf5/wBhzP8AWab/AGLH/wDL6f8AMa//AL3y/wDQ//8Atf//ANH//wC1
//8Az///AM77/wDQ//8Auf//AND9/wNSxf0ABT3NAAAzDAAAAAAAAAAALQA65QINmf0A4vT/AND6
/wBYpP8ABZL/AABz/wAAj/8AAJb/AABz/wAAj/8AAJb/AABz/wAAkv8AAHP/AACM/gAASPIDCpH+
AKPk/wAXm/8ADHj/AITJ/wDM/P8A0v//AMn5/wCf9P8AwvT/AL/0/wDd9v8AZc7/ALLr/wAxrf8A
xOb/AB16/wBMvf8Azvv/AMX1/wDW/v8Azfr/ANb//wC7//8A0v//ALX//wDS//8C3Pb9LTqi2RgX
ZxoAADMBAAAAAAAAAAAUAHgUAAec8QCF1P8AufL/AGnB/wAGdv8AAIz/AABz/wAAl/8AAI7/AABz
/wAAl/8AAJD/AACY/wABj/8AFoH/AAGS/wAAdP8ABpf/AAF1/wAYof8A5Pj/ALj//wDQ/f8AktT/
ABCe/wBFnf8AJ6b/AGfQ/wA3pf8ATqD/AJ3i/wAPlv8AAHD/AAx4/wCk5P8APaD/AOL3/wCP0v8A
0+f/ANbw/wDL+P8A0///AMf8/wA1uvQRK6wWNCyaAAAAMQAAAAAAAAAAAAAEcj4AGqf0AK33/wBv
1v8AHqb/AAGY/wAAdf8AAJb/AACN/wAAdP8AAJb/AACN/wAAdP8AAJX/AApx/wCl8P8AGaf/AAGQ
/wAAmP8ABpL/AG3U/wDP/f8Azf//ANb//wDg+v8AK7H/ABud/wCi1P8As/D/AFbL/wAwsP8ANq3/
ABp//wAGlf8AAI3/AACV/wAHcP8AgOL/AGTB/wAJef8ACZH/AGnE/wDO+/8Ahtr/AApCxQABNQsA
AAAAAAAAAAAAAAAAAAAADQZ5/wFjyv8A6/z/ANP8/wCBzP8AB5H/AACY/wAAi/8AAHf/AACW/wAA
i/8AAHf/AACW/wAAi/8ADnz/AOj0/wBbvv8ABXn/AACJ/wAMfP8Ayvf/ANP//wC5//8A0f//ALb+
/wCl7v8AX6//AI3s/wBizv8AgNj/AKnk/wC95v8AhM7/AFq0/wBDkv8AKq3/ABJ2/wAAlP8AAIr/
AACJ/wAAdf8ACJD/AJHd/AALb7oAAGoKAAAzAAAAAAAAAAAAAAAAAAAAAAAhCI//An/L/wDQ/P8A
zvv/AFq6/wAFbP8AAJX/AAB4/wAAif8AAJf/AAB4/wAAif8AAJf/AAB4/wANnf8A5/X/AE6r/wAE
i/8AAHf/AAyQ/wDK+v8A0///AMr//wDU//8AyP3/AL3b/wBBvv8Ab8v/AKLf/wDr/P8AV7v/AAOL
/wBXu/8Al9P/ALXj/wCj7/8Agb//AFS4/wBBlf8AGYT/AAeT/wAAZv8AAILwAACKBAMCOwAAADMA
AAAAAAAAAAAAAAAAAAAAABEHbP8Bcsz/AND8/wDJ+v8AIar/AAF9/wAAhv8AAJn/AAB6/wAAhv8A
AJn/AAB6/wAAhv8AAZr/AB2f/wDn9/8AP8r/AANs/wAAlP8AC27/AMHo/wDh/v8Arf//ANL//wC+
//8A5vz/AFbA/wCGyv8Ahdj/AJDX/wBqxf8AMY7/AAmR/wAAZ/8AAJf/AE62/wCKyv8Aqt7/AK3y
/wB95P8AfML/AFCf/wEunPYtG41jAwEwVQAAKgUAAAAAAAAAAAAAAAAAAAAAHQNV/wI3of8A0/3/
AOX//wB84P8ABon/AAB6/wAAg/8AAJn/AAB8/wAAg/8AAJn/AAB8/wABg/8AJp3/AOr2/wBpyf8A
BoP/AACX/wAFgP8AZLj/ANv+/wDV//8Ayv//AMvw/wDX//8A1v//AI/k/wBowv8Aar7/AFSj/wBb
tv8AX8D/ACN+/wAAgf8AHqr/AAp6/wAAlv8ALqD/AGe+/wCaxP8AqO7/Apvu/xuBwv8ACGX4AABf
DwAAAAAAAAAAAAAAAAAAAAAAADiGAAN9+ABmyP8ApuT/AH3h/wAYgv8AAZn/AAB+/wAAgf8AAJn/
AAB+/wAAgf8AAJn/AACA/wANn/8A7Pj/AJDg/wAIhv8AAIH/AACZ/wAAhP8AVcv/AIS4/wBby/8A
XKL/AJvm/wDf+/8Aldb/AOD//wDd//8A1///AH7M/wCA5P8AbLX/AFKt/wAsm/8APrH/AASC/wAA
fP8AAHn/AAB9/wAmrv8AWbL/AIHL/xcIcPkZAGsPAAAAAAAAAAAAAAAAAAAAAAAAP4YAB5v4AHvK
/wCS5P8AkeP/AEG1/wACgf8AAJj/AACC/wAAfv8AAJn/AACB/wAAfv8AAJn/AA2F/wDc+f8Az/n/
AAqF/wAAgf8AAH3/AAB//wAAef8AAH//AACT/wAAZv8APKz/AO32/wAgnv8AULD/AL7//wDW//8A
1///AJrl/wCAz/8Af+X/AHG4/wAklP8AAYD/AACA/wAAmf8AAoP/ACav/wAmsf8BJpb3MAU4eTcA
LAcAAAAAAAAAAAAAAAAAAAAAHBg5/wIPmf8A3/z/ANr//wDV/v8Aicz/AB+I/wAAlv8AAH3/AACB
/wAAfP8AAJn/AACD/wAAev8ACon/ALXd/wDc+f8ANrj/AAOA/wAAhf8AAJj/AACD/wAAeP8AAHn/
ADGh/wCk0/8Ald3/AAeA/wAAgf8AR6j/ALv+/wDV//8Avv//ALDp/wCDyv8AXsX/AJC//wAamf8A
AIL/AAB8/wAEhf8Abcv/AG7J/wAqgfAAT80HMwAzAAAAAAAAAAAAAAAAAAAAAAAvKEJkAQ+d9gDi
+f8A2P//AND8/wByy/8AFJz/ABqY/wACif8AAJj/AACH/wAAev8AAJf/AACH/wAGfv8Ac8v/AMv7
/wCj6P8ACGv/AAB5/wAAmP8ACJ3/AInJ/wCszP8Ax/H/AJXf/wAfjP8AAYf/AACX/wAAZ/8APZv/
AJ/f/wDi//8A2P//AMbt/wCF1v8AYqT/AJbY/wA4uP8AAmv/ADe3/wBKrv8AYMT/AARL9wAAQw8A
AAAAAAAAAAAAAAAAAAAAAAAAAAAA4gkADKDwALr7/wC4//8A0f7/AKru/wBavv8AEZn/AAF6/wAA
lf8AAHn/AACJ/wAAlv8AAHn/AAGI/wAii/8A5/n/ANH8/wA/sP8AA4r/AAB4/wAEl/8AQpn/AFG4
/wBNlf8AF4P/AACJ/wAAl/8AAHj/AACJ/wAAhv8AJIX/AFO5/wDM+/8Au///ANT//wCQz/8ASbv/
AI/N/wB10P8AH6n/AEKa/wAapvUABERRAAAvBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByDwAEdvIA
TbP/AOD7/wDX//8A0v3/AGXN/wAim/8AAo3/AACY/wAAi/8AAHf/AACW/wAAi/8AAHb/AAeO/wCa
1v8A0Pz/AK/u/wAKe/8AAIv/AACX/wAAif8AAHP/AACI/wAAif8AAHf/AACW/wAAi/8AAHf/AACX
/wAAiv8ABnn/AMj3/wDL//8A0///ALr//wC14v8AN6z/AG/a/wCy4f8CHZv/JQB08TsAkQkAADMA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIDAAJlOgEJcvQANKn/AGyw/wBy1v8Ake7/ADGf/wAEmP8A
AHX/AACW/wAAjf8AAHT/AACW/wAAjf8AAXb/ACCk/wDJ+f8A0/7/AIbc/wAJev8AAJT/AAB1/wAA
i/8AAHX/AACW/wAAjf8AAHT/AACX/wAAjf8AAXX/AAyd/wCj3v8AtP3/ANL//wC4//8A5P7/AJf3
/wAHeP8AFH3/AFav/wF83P8KCEbuCwA8DgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZgA1LGMM
KSJn8QIMmv8A1Or/AMP3/wDM/P8AmMn/AGnC/wAHk/8AAXP/AACV/wAAj/8AAHP/AACV/wAAj/8A
AnT/AEmo/wDo+f8Azf3/AG+9/wALeP8AAI7/AAKZ/wABj/8AAHP/AACU/wADbv8ABJb/AA55/wBu
vP8As+7/ANX//wDP//8A1v//AOL6/wBvzv8AGob/ABKX/wCb2/8CD5j3KBpX6woIOi8AAC8CAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMrOQ0wKT/kAw+a/gDQ+v8A1P//ANP//wCt+P8AgdH/
ADLE/wAikf8AAnP/AACU/wAAkf8AAHP/AACU/wAAkf8ACXX/AGTJ/wDL+f8AzPr/AJXo/wAVff8A
Qpf/ACmZ/wAOmf8AEqH/AFHC/wB7y/8A2O3/AM76/wDU//8A1f//AM76/wDA9f8ALKn/AByA/wBw
vv8Axeb+ACWq5gIHmSgzAC0a/wAAAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMysx
AR4XYB8EDp7zAOT2/wC2//8Az///AND//wCs+f8Aj8n/ABJ1/wAAkf8AAHP/AACS/wAAk/8AAHP/
AACS/wAAk/8ADHn/AHvF/wDm+P8A1f//AJzw/wAkpv8AWqL/AK/q/wDS7/8Awvf/AMr3/wC5//8A
0v//ALn//wDH9v8AaK7/ACer/wBvxP8AyOb/AFXE/wQXc/ICBIMfAACZADAAOQAzADMAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzKzMAMACaDC0KnNUClcr9AND9/wC7//8Azv//ALfx
/wBO0f8AUJ//AAmY/wAAj/8AAHP/AACX/wAAj/8AAHL/AACR/wAAlP8ACnL/AFbG/wDW8f8A1f//
AMv5/wCm0P8ALKz/ACms/wBgzP8An9D/ALvw/wDB8v8A2PD/AIDS/wCY7P8Al+//AEKs/wAsqv8C
GaL/KAE78SsAMw4AAJkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAzAJkADgONFAAOjvQAqej/ANTu/wCU6v8AXbT/AL/3/wCL0/8AOan/ABB1/wABlf8AAI//AAB0
/wAAk/8AAHX/AACU/wAAc/8AApD/ABCf/wCp4/8Awvf/ANX//wDT/v8A1Pv/AJDX/wBs0v8ATK7/
AEus/wBLrv8ATND/AHOx/wCR1v8Aufz/AOz+/wCW7P8BCU7xAgAuCwMCOQAwKDMAMyszADMrAAAz
KwAAMysAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQLAAA6vgAElMwAJJz8AFey/wDo
+v8Auf//AND//wCQ+f8AQp7/AAKW/wAAdv8AAIz/AACY/wAAjv8AAJj/AACM/wAAdv8AAJT/AAVu
/wBGv/8Ao93/ALTq/wDZ9v8A0P//ANj//wDg//8A2f//AOD//wDR//8A6v//AL/2/wDP6v8Apd3/
AEXC/wAEm/QAAJdBAwAtNjQsKjIAGv8AAAD/ADgvAC8AAP8AMCg5ADMrMwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAMwAAADkAEQCMDA4MlPEBw/v/ANT//wDV//8Ay///ANX5/wAXn/8AHaP/AAKL/wAA
dv8AAIj/AAB3/wAAlf8AAHf/AACK/wAAlv8AAHj/AACI/wAAdv8AHpf/AD+x/wB74v8Andf/ALnY
/wCh4/8AuNj/AIHk/wB51f8AP7H/AB6Y/wAAdf8AAIr/AACX/wAAiv8CB1v/IxpN9wcag00HAHxN
JRkp7AoAd000KzA/AAD/AAAAZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjAFQPIQdd9wGA6v8A
4P//AMb//wC5//8A2/r/AEWg/wCB0/8AAnr/AACW/wAAeP8AAIj/AACY/wAAif8AAHn/AACW/wAA
iv8AAHf/AACI/wAAl/8AAHf/AACE/wAAc/8AAGb/AACT/wAAdv8AAIT/AAB1/wAAdf8AAIj/AACY
/wAAef8AAJX/AAZu/wBn1v8ARr3/AFy5/wBEuf8AT7z/AjOz/yEYVvoGAFtWuBN9ADMAZgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAMQkAAjudEh+j/wGr7P8Az///AOL+/wCN7P8AeMX/ALP5/wBgwv8A
Apj/ABuX/wACev8AAIP/AAB5/wAAhv8AAJX/AABp/wAAlf8AAHz/AACF/wAAmf8AAHz/AACY/wAA
fP8AAIb/AACX/wAAfP8AAIb/AACX/wAAfP8AAIX/AACY/wAAhv8ADID/AOX5/wDd//8A2v//ANv/
/wDi//8AvP7/AGLC/wEejPwvBGtjNwBmBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAP8A/wExAGeP
Ahmf/wCi6/8A1f3/AFG9/wDK/v8Axv//AOn//wBUx/8AX67/AAaa/wAAf/8AAJb/AAB//wAAl/8A
AH//AACY/wAAhP8AAHv/AACC/wAAmf8AAIT/AACW/wAAaf8AAJX/AACE/wAAfv8AAJb/AACF/wAA
ff8AAJb/AABo/wAYr/8A2vv/AMT//wDU//8A1f//AL3//wDX//8A3P//Aorf/xwHavgeAGMPAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAMwBmAP8qygAAAGOCABKB/wBOyf8AOKD/AN/5/wDB//8A0v//
ALL//wC15P8ACJr/AACD/wAlrP8AAIH/AAB+/wAAmf8AAID/AACB/wAAmP8AAH//AAB+/wAAgP8A
AJb/AACD/wAAlv8AAIH/AACB/wAAlf8AAGj/AACT/wAAfv8AUZn/AILk/wDP/v8AwP//ANT//wDB
//8A1P//AMD//wDA//8A4Pv/ACKe8QAVmA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABm
AAAQ/wAAAC50AABe/wAenf8A5Pz/ANb//wC+//8AxP//AN79/wA8uf8AWZ//AFLH/wAvnf8APZn/
AAF8/wAAgP8AAH//AACZ/wAAmf8AAIP/AAB9/wAAl/8AAID/AACW/wAAf/8AAIH/AACV/wAAhf8A
Xc7/AHe9/wCu6v8A1///AML//wDV//8Avv//AMH//wDT//8Awv//AMD//wDb/P8AOdTxAC7RDwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAATgAAADZnAAZ8/QB+wv8A1f7/AMj/
/wDY//8A6f3/AGe1/wDB6v8Apev/AJDu/wDG6v8AO6b/ADCX/wABg/8AAHv/AACX/wABf/8AFJ3/
AAB7/wAAhP8AAJX/AACE/wAvmf8AN7f/AJPV/wBoxv8A1///AMf//wDU//8A1v//ALz//wDD//8A
1v//ANT//wC9//8Axf//AOH7/wAes/EAEa4PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAzAAAAAAAGAWVaIAx4+wJHuP8AneD/ALf9/wB2wP8AYL//AM39/wC9//8Ayv//AN/+
/wB60v8Acdz/ADe6/wAZhv8AAHP/AANq/wBz4/8AH4v/AB6a/wBQuP8AVbv/AHG9/wCT7f8A4f//
AJza/wCEv/8A1Pz/ANX//wC5//8Axv//ANT//wC7//8A0v//AMf//wDV//8CwPn/IAt99iIAdQ8A
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAKcQA0AGRDAwCFUgIh
YPghK4z/Agp2/wAjqv8A5/v/AMv//wDV//8A0f7/AJ7u/wBtvv8Aye7/AKfk/wB91P8Af9f/AMT8
/wCJ4/8AccP/ALvv/wDD8v8A2fP/ALH//wDS//8A1///AK7i/wB82v8Am9z/AOT+/wDY//8A1f//
AMn//wDV//8A2P//AM78/wE2uPgtCHFONwBiBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAMwBmADAAaQAKGP8AAwAoNjEAVzoDAGxFAASZ9ABds/8A0fv/APL//wDY
//8A3/r/ACyj/wDx+v8Avf//AMv//wCx//8A0///AMb8/wBSsP8A6fv/ALr//wDA//8Ay///ANP/
/wC4//8A1P//ALLx/wBgzP8AQrb/AJD7/wC0//8A0v//ALL9/wBy2P8AM7L0AACXQb0nAAAzAGYA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAD
ADYALQBjAAsAAAAAAYM2AgdL7yUlpvoCMq77AGbO/wBOq/8BCpv/AHLS/wDj+/8A1v//AM7//wDV
//8A0v7/AJPr/wF71/8A4/z/AM7//wDU//8At///AMz//wDW//8C6fv/Jz3O7woDpDkKXdE5JyBa
7wUmWPonH1nvCjyqOQAAlCsAPLYAAACZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZAAAY/wADADEgMQCMIgIAfC4A
CkjpAgY+9SciHfUCDXH1ACup9QCk8/4Ay/n/As35/wDH9f4CY9H1JxN+9QJM0PUAqPX+Auv5/wDo
+/8Czfn/AKbz/gBPrOomMsEsAAAAAAD//wA0ACQgBgAlIjQAJCAA//8AAAWcAAAAmQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAzAAMAOQAtAJMAAAAAAAAAKhkDACoaMCgAGgMAXRoAAHYnABFL8gMWc/8p
FnP/AxZM8gI4lycwAmwaAhmXJwMSTPIpGnb/BRue/ykWdv8DEkvyABp3JgAAAAAzK8wAMwAzADAA
MwAGADMAMAAzADMAMwAAAAAAAAAAAAAAAAAAAAAAf//A/AH/gACAAAAAAABAAIAAAAAAAEAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAA
AEAAAAAAAAAAgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAD
gAAAAAAAAAPAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAA4AAAAAAAAAAAABgAAAAAAAAAHgAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAB/AAAAAAAAAH+AAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAgAAAAAAAQAD//4AAAAPAAA==')
	#endregion
	$formMain.Margin = '5, 5, 5, 5'
	$formMain.Name = 'formMain'
	$formMain.StartPosition = 'CenterScreen'
	$formMain.Text = 'ReportSC: Your Personal DPS Reports Database'
	$formMain.add_FormClosing($formMain_FormClosing)
	$formMain.add_FormClosed($formMain_FormClosed)
	$formMain.add_Load($formMain_Load)
	#
	# buttonGenerateHistogram
	#
	$buttonGenerateHistogram.Anchor = 'Bottom'
	$buttonGenerateHistogram.ImageList = $imagelistButtonBusyAnimation
	$buttonGenerateHistogram.Location = '450, 658'
	$buttonGenerateHistogram.Margin = '4, 4, 4, 4'
	$buttonGenerateHistogram.Name = 'buttonGenerateHistogram'
	$buttonGenerateHistogram.Size = '300, 30'
	$buttonGenerateHistogram.TabIndex = 0
	$buttonGenerateHistogram.Text = 'Generate &Histogram'
	$buttonGenerateHistogram.TextImageRelation = 'ImageBeforeText'
	$buttonGenerateHistogram.UseVisualStyleBackColor = $True
	$buttonGenerateHistogram.add_Click($buttonGenerateHistogram_Click)
	#
	# sizeLabel
	#
	$sizeLabel.Font = 'Microsoft Sans Serif, 9pt'
	$sizeLabel.Location = '19, 52'
	$sizeLabel.Margin = '4, 4, 4, 4'
	$sizeLabel.Name = 'sizeLabel'
	$sizeLabel.Size = '113, 26'
	$sizeLabel.TabIndex = 0
	$sizeLabel.Text = 'Size: '
	$sizeLabel.TextAlign = 'MiddleLeft'
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '19, 20'
	$textboxSearch.Margin = '5, 5, 5, 5'
	$textboxSearch.Name = 'textboxSearch'
	$textboxSearch.Size = '896, 23'
	$textboxSearch.TabIndex = 0
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.EditMode = 'EditOnF2'
	$datagridviewResults.Location = '19, 78'
	$datagridviewResults.Margin = '4, 4, 4, 4'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.RowTemplate.Height = 24
	$datagridviewResults.Size = '1150, 572'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_CellContentClick($datagridviewResults_CellContentClick)
	$datagridviewResults.add_CellContentDoubleClick($datagridviewResults_CellContentDoubleClick)
	$datagridviewResults.add_CellEndEdit($datagridviewResults_CellEndEdit)
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	$datagridviewResults.add_UserDeletingRow($datagridviewResults_UserDeletingRow)
	$datagridviewResults.add_KeyPress($datagridviewResults_KeyPress)
	#
	# buttonSearch
	#
	$buttonSearch.Anchor = 'Top, Right'
	$buttonSearch.Location = '924, 16'
	$buttonSearch.Margin = '4, 4, 4, 4'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '100, 30'
	$buttonSearch.TabIndex = 1
	$buttonSearch.Text = '&Search'
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# buttonLoad
	#
	$buttonLoad.Anchor = 'Bottom, Right'
	$buttonLoad.Location = '958, 658'
	$buttonLoad.Margin = '4, 4, 4, 4'
	$buttonLoad.Name = 'buttonLoad'
	$buttonLoad.Size = '100, 30'
	$buttonLoad.TabIndex = 1
	$buttonLoad.Text = '&Load'
	$buttonLoad.UseVisualStyleBackColor = $True
	$buttonLoad.add_Click($buttonLoad_Click)
	#
	# buttonSave
	#
	$buttonSave.Anchor = 'Bottom, Left'
	$buttonSave.Location = '19, 658'
	$buttonSave.Margin = '4, 4, 4, 4'
	$buttonSave.Name = 'buttonSave'
	$buttonSave.Size = '100, 30'
	$buttonSave.TabIndex = 1
	$buttonSave.Text = '&Save'
	$buttonSave.UseVisualStyleBackColor = $True
	$buttonSave.add_Click($buttonSave_Click)
	#
	# buttonUpdate
	#
	$buttonUpdate.Anchor = 'Bottom, Right'
	$buttonUpdate.Location = '850, 658'
	$buttonUpdate.Margin = '4, 4, 4, 4'
	$buttonUpdate.Name = 'buttonUpdate'
	$buttonUpdate.Size = '100, 30'
	$buttonUpdate.TabIndex = 1
	$buttonUpdate.Text = '&Update'
	$buttonUpdate.UseVisualStyleBackColor = $True
	$buttonUpdate.add_Click($buttonUpdate_Click)
	#
	# buttonExport
	#
	$buttonExport.Anchor = 'Bottom, Left'
	$buttonExport.Location = '127, 658'
	$buttonExport.Margin = '4, 4, 4, 4'
	$buttonExport.Name = 'buttonExport'
	$buttonExport.Size = '100, 30'
	$buttonExport.TabIndex = 1
	$buttonExport.Text = '&Export'
	$buttonExport.UseVisualStyleBackColor = $True
	$buttonExport.add_Click($buttonExport_Click)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '1066, 658'
	$buttonExit.Margin = '4, 4, 4, 4'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '100, 30'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonAddRow
	#
	$buttonAddRow.Anchor = 'Top, Right'
	$buttonAddRow.Location = '1066, 16'
	$buttonAddRow.Margin = '4, 4, 4, 4'
	$buttonAddRow.Name = 'buttonAddRow'
	$buttonAddRow.Size = '100, 30'
	$buttonAddRow.TabIndex = 4
	$buttonAddRow.Text = '&Add'
	$buttonAddRow.UseVisualStyleBackColor = $True
	$buttonAddRow.add_Click($buttonAddRow_Click)
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAVgBAQFYAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/AzUB/wM1Af8DwgH/MAADwgH/A1UB/wOCAf8DwgH/sAADNQH/AwAB/wMAAf8DNQH/
MAADggH/AzUB/wM1Af8DVQH/gAADwgH/AzUB/wM1Af8DwgH/IAADNQH/AwAB/wMAAf8DNQH/A8IB
/wNVAf8DggH/A8IB/xAAA8IB/wM1Af8DNQH/A8IB/wNVAf8DNQH/AzUB/wNVAf8EAAOSAf8DkgH/
A8IB/3AAAzUB/wMAAf8DAAH/AzUB/yAAA8IB/wM1Af8DNQH/A8IB/wOCAf8DNQH/AzUB/wOCAf8Q
AAM1Af8DAAH/AwAB/wM1Af8DwgH/A1UB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAzUB/wMA
Af8DAAH/AzUB/zAAA1UB/wM1Af8DNQH/A1UB/xAAAzUB/wMAAf8DAAH/AzUB/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wNVAf8DggH/A8IB/xAAA8IB/wM1Af8DNQH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wOCAf8DVQH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAM1Af8DAAH/AwAB/wM1Af8wAANVAf8DNQH/
AzUB/wNVAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAM1Af8DAAH/AwAB
/wM1Af8wAAOCAf8DNQH/AzUB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DNQH/AzUB/wPCAf8wAAPCAf8DggH/A1UB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DVQH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANVAf8DNQH/AzUB/wNVAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wM1Af8DNQH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DVQH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
VQH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AzUB/wM1Af8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADVQH/AzUB/wM1Af8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A1UB/wNVAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DNQH/AzUB/wPCAf8wAAPCAf8DVQH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADNQH/AwAB/wMAAf8DNQH/MAADggH/AzUB/wM1
Af8DVQH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADNQH/AwAB/wMAAf8D
NQH/MAADVQH/AzUB/wM1Af8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/AzUB/wM1Af8DwgH/MAADwgH/A1UB/wNVAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wNVAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wM1Af8DNQH/A8IB/1AAAzUB/wMAAf8DAAH/AzUB/zAAA4IB/wM1Af8DNQH/A1UB
/zAAA5IB/wOCAf8DggH/A5IB/xAAAzUB/wMAAf8DAAH/AzUB/1AAAzUB/wMAAf8DAAH/AzUB/zAA
A1UB/wM1Af8DNQH/A4IB/wOSAf8DNQH/AzUB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A1UB
/wOCAf8DwgH/AzUB/wMAAf8DAAH/AzUB/1AAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wOCAf8DVQH/
A8IB/wM1Af8DAAH/AwAB/wM1Af8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AzUB/wM1Af8DVQH/A8IB
/wM1Af8DNQH/A8IB/6AAAzUB/wMAAf8DAAH/AzUB/zAAA1UB/wM1Af8DNQH/A4IB/7AAA8IB/wM1
Af8DNQH/A8IB/zAAA8IB/wOCAf8DVQH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMain.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: bin\DPSCrimeLogGrabber.ps1
function Invoke-DPSCrimeLogGrabber_ps1
{
	#This script is what grabs data from the DPS servers and can run in one of two modes:
	#option = 1: grab data from the links up on the DPS report log website
	#option = 2: iterate through a hardcoded range of valid dates and attempt to download them from the DPS website
	function update-logs{
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	         [int] $option = 1,
	         [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [string] $projectpath,
	         [switch] $updateDataset,
	         [string] $datasetname = "Backup2016.dps",
	         [string] $website
	    )
	
	    [string]$convertedFilePath=""
	    #Finding your current directory
	
	    #Start-sleep -seconds 5
	    #Establishing PDFConverter function
	    . $projectpath\bin\PDFConverter.ps1
	
	    if($updateDataset){
	        . $projectpath\bin\DPSTextParser.ps1
	        $reportArray= new-object System.Collections.ArrayList
	    }
	
	    #Initializing an arraylist called links which will contain a list of links to download the report from for that day
	    [System.Collections.ArrayList] $links = new-object System.Collections.ArrayList
	
	    #-----------------PHASE 1: Generate Links------------------#
		#option 1
		
		if ($option -eq 1)
		{
			
	        $site = Invoke-WebRequest http://dps.usc.edu/alerts/log/ -sessionvariable sesh
	        $links = $site.Content | grep "http://dps.usc.edu/files" | %{$_.split('"')[1]} | grep "http://dps.usc.edu/files"
	    }
	    #option 2
	    if($option -eq 2){
	    
	        [int[]] $daysinthemonth = 31,28,31,30,31,30,31,31,30,31,30,31
	        #hard coded date range in format month, day, year
	        [int[]] $startdate= 11,1,15
	        [int[]] $enddate= 2,1,16
	    
	        #get the day of the week it is and initialize the daycount to that day
	        $daycounthelper= Get-Date -Month $startdate[0] -Day $startdate[1] -Year (2000+$startdate[2])
	        $daycount=$daycounthelper.DayOfWeek.value__-1 #0=monday, 6=sunday
	
	        #while startdate hasn't reached enddate
	        while (($startdate[0] -ne $enddate[0]) -or ($startdate[1] -ne $enddate[1]) -or ($startdate[2] -ne $enddate[2])){
	        
	            #conditional to ensure no weekends are counted
	            if($daycount -ne 5 -and $daycount -ne 6){
	
	                $month=$startdate[0]
	                $day=$startdate[1]
	                $year=$startdate[2]
	
	                #generate link
	                $linkstring="http://dps.usc.edu/files/20{2}/{0}/{0}{1}{2}.pdf" -f $month.tostring("00"), $day.tostring("00"), $year.toString("00")
	                [void]$links.add($linkstring) 
	            }
	
	            #increment the daycount
	            $daycount=$daycount+1
	            if($daycount -eq 7){
	                $daycount=0
	            }
	
	            #increment the day, month, and year as appropriate
	            $startdate[1]=$startdate[1]+1
	            if($startdate[1] -gt $daysinthemonth[$startdate[0]-1]){
	                $startdate[1]=1
	                $startdate[0]+=1
	                if($startdate[0] -gt 12){
	                    $startdate[0]=1
	                    $startdate[2]+=1
	                }
	            }
	        }  
	    }
	    if($option -eq 3){
	        $links.add($website)
	    }
	    #-----------------PHASE 2: Download from the links------------------#
	    $count=0
	    for ($i=$links.count-1; $i -ge 0; $i--){
	        $link=$links[$i]
	        #Extracting the file name from the link and converting to a .txt file
	        $txtname=$link -split "/"
	        $txtname=$txtname[$txtname.length-1]
	        $txtname=$txtname -replace ".pdf",".txt"
	
	        $month=$txtname.substring(0,2)
	        $year=$txtname.substring(4,2)
	
	        #Creating folders if they don't already exist
	        if(-Not (Test-Path $projectpath\dpsreports\20$year)){
	            Write-verbose "20$year year folder does not exist. Creating folder"
	            mkdir $projectpath\dpsreports\20$year
	        }
	        if(-Not (Test-Path $projectpath\dpsreports\20$year\$month)){
	            Write-verbose "$month month folder does not exist. Creating folder"
	            mkdir $projectpath\dpsreports\20$year\$month
	        }
	
	        #Downloading the file if it doesn't already exist
	        if (-Not (Test-Path $projectpath\dpsreports\20$year\$month\$txtname)){
	            $count+=1
	            Write-verbose "$txtname does not exist"
	            Write-verbose "Pulling data from $link" 
	            try{
	            
	                #check if this is a valid link	
	                $site=Invoke-WebRequest $link 
	
	                #calls convertpdf function with given link and filepath to store data in
	                convertpdf -link $link -path $projectpath
	                if($updateDataSet){
	                    write-verbose "Appending to Dataset"
	                    $retval = parsereports -option 4 -filepath $projectpath -file $txtname -generateDataset -dataset $datasetname -append -suppress
	                    write-verbose "Appended to Dataset"
	                }
					
				}
				catch
				{
					Write-Error "An error has occured"
					Write-Error $_.Exception.Message
					return -1
				}
				
			}
		}
		
	    if($count -eq 0){
	        return 0 #no files were downloaded
		}
		else
		{
			return 1
		}
	}
}
#endregion Source: DPSCrimeLogGrabber.ps1

#region Source: bin\DPSReportSearch.ps1
function Invoke-DPSReportSearch_ps1
{
	#This script searches the reportArray array of dictionaries generated by the DPSTxtParser script
	#field- Field to focus on
	#value- Value to search for within field. Allows for regular expressions
	
	Function searchReport{
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [System.Collections.ArrayList] $array,
	         [Parameter (
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [string] $field,
	         [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [string] $value
	    )
	    #create a new searchedList to contain the matching reports
	    [System.Collections.ArrayList] $searchedList= New-Object System.Collections.ArrayList
	    if(-not $field -or $field -eq ""){
	        foreach ($case in $array){
	            foreach ($item in $case.values){
	                if($item -match "$value"){
	                    [void]$searchedList.add($case.clone())
	                    break
	                }
	            }
	        }
	    }
	    #checks if a valid field is entered
	    elseif($array[0].keys -contains $field){
	        
	        #iterates through the array and adds matches into searchedList
	        foreach ($case in $array){
	            if($case.$field -match "$value"){
	                [void]$searchedList.add($case.clone())
	            }
	        }
	    }
	    else{
	        Write-Error "Report does not contain such field"
	        return
	    }
	    return @(,$searchedlist)
	}
}
#endregion Source: DPSReportSearch.ps1

#region Source: bin\DPSTextParser.ps1
function Invoke-DPSTextParser_ps1
{
	#This script reads the .txt files from your folder and stores them into an arraylist of dictionaries called global:reportArray
	#There are four options to run this script:
	#option=1: read all .txt files
	#option=2: read all .txt files in a given year
	#option=3: read all .txt files in a given month
	#option=4: read a specific .txt file
	function parseReports{
	    [OutputType([System.collections.Arraylist])]
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	         [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [int] $option,
	         [Alias("projectpath")]
	         [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [string] $filepath,
	         [ValidateNotNull()]
	         [string] $file,
	         [string] $year,
	         [string] $month,
	         [switch] $generateDataset,
	         [string] $dataset,
	         [switch] $append,
	         [switch] $suppress
	    )
	    #Generates the dictionary of .txt files based on which option you picked
	    if($option -eq 1){
	        $txtlist= dir -recurse $filepath\dpsreports\*txt
	    }
	    elseif($option -eq 2){
	        if(-not ($year)){
	            $year = Read-host "Year"
	        }
	        $txtlist= dir -recurse $filepath\dpsreports\$year\*txt
	    }
	    elseif($option -eq 3){
	        if(-not ($year)){
	            $year = Read-host "Year"
	        }
	        if(-not ($month)){
	            $month = Read-host "Month"
	        }
	        if($month.length -eq 1){
	            $month="0"+$month
	        }
	        $txtlist= dir $filepath\dpsreports\$year\$month\*txt
	    }
	    elseif($option -eq 4){
	        if(-not ($file)){
	            $txtinput = Read-host "File"
	        }
	        else{
	            $txtinput=$file
	        }
	        $month=$txtinput.substring(0,2)
	        $year=$txtinput.substring(4,2)
	        $txtlist= dir $filepath\dpsreports\20$year\$month\$txtinput
	    }
	
	    #extracting the name of each .txt file from txtlist 
	    $txtlist= $txtlist.name
	
	    #count keeps track of what index we are currently on when adding to our array
	    $count=0
	
	    #summary is the summary field of each report
	    $summary=""
	
	    #report is the dictionary that we will fill out as we iterate through the file and add to our array
	    $report=@{"Report #"="";"Incident"="";"Location"="";"Occurred"="";"Reported"="";"Disposition"="";"Summary"=""}
	
	    #finally, our array is where we will add all of our reports into
	    [System.Collections.ArrayList] $array=new-object System.Collections.ArrayList
	
	    $reportnums= @{}
	
	    #-------------------------------------------------Text parsing---------------------------------------------------------#
	    #This is where the juicy txt parsing happens. I won't go into much detail but essentially we are using a state machine to
	    #keep track of what fields we have already gotten and what we're looking for next. This is important because the pdf to txt
	    #conversion doesn't happen very neatly. Regardless, this method works very well and is able to successfully parse through and
	    #read about 95% of reports. Successful reads are determined by no empty fields and no junk text in the summaries.
	    $state=0
	    foreach ($txt in $txtlist){
	        $state=0
	        $summary=""
	        $month=$txt.substring(0,2)
	        $year=$txt.substring(4,2)
	        $reader = [System.IO.File]::OpenText("$filepath\dpsreports\20$year\$month\$txt")
	        $nextline = $reader.ReadLine()
	        try {
	            for() {
	                $line=$nextline
	                $nextline = $reader.ReadLine()
	                 
	                #
	
	                if ($line -eq $null) { break }
	            
	                if($state -eq 0){
	                    if($line -like "*#*"){
	                        $state=1
	                        $line= $line -replace "Reported: "
	                        $line= $line -replace "Location"
	                        $line= $line -replace "Report.*#"
	                        $line=$line -split ": "
	                        $report["Reported"]=$line[0]
	                        $report["Location"]=$line[1]
	                        $report["Report #"]=$line[2]
	                    }
	                }
	                elseif($state -eq 1){
	                    if($line -split " " | %{$_ -cmatch “^[A-Z]*$”} | select-object -index 0){
	                        $report["Location"]+=$line
	                    } 
	                    if($line -like "*Disposition*"){
	                        $state=2
	                        $line= $line -replace "Occurred: "
	                        $line= $line -replace "Disposition"
	                        $line=$line -split ": "
	                        $report["Disposition"]=$line[1]
	                        $report["Occurred"]=$line[0]
	                    }
	                    if($nextline -like "*#*"){
	                        #write-output "State Reset"
	                        $state=0
	                    }
	                }
	                elseif($state -eq 2){
	                    if($line -like "*Incident:*" -and $line.length -gt 10){
	                   
	                        $line= $line -replace ".*Incident: "
	                        $report["Incident"]=$line
	                        $state=3
	                    }
	                    elseif($line -ne "" -and ($line -split " " -split "-" -split "&" | %{$_ -cmatch “^[A-Z]*$”} | select-object -index 0)){
	                        $line= $line -replace ".*Incident: "
	                        $report["Incident"]=$line
	                        $state=3
	                    }
	                }
	                elseif($state -eq 3){
	                    if($line -like "*#*"){
	
	                        $reportnum=$report["Report #"]
	                        if($summary -like "*$reportnum*"){ 
	                            $lowerIndex=$summary.indexof("$reportnum")+$reportnum.length
	                            $upperIndex=$summary.lastindexOf(".")
	                            if($upperIndex-$lowerIndex+1 -gt 0){
	                                $summary=$summary.substring($lowerIndex, $upperIndex-$lowerIndex+1)
	                            }
	                        }
	                        if($summary -like "*Summary*"){
	                        
	                            $lowerIndex=$summary.lastindexof("Summary")+9
	                            $upperIndex=$summary.lastindexOf(".")
	                            if($upperIndex -gt 0){
	                                $summary=$summary.substring($lowerIndex)   
	                            }
	                        }
	                        $regEx = [regex]'\w'
	                        $match=$regEx.Match($summary)
	                        $summary=$summary.substring($match.index)
	                        if($summary.length -gt 10){
	                            if($summary.substring(0,10).equals("University")){
	                                $regEx = [regex] '\s{2,}'
	                                $match=$regEx.Match($summary)
	                                $summary=$summary.substring($match.index)
	                                $regEx = [regex]'\w'
	                                $match=$regEx.Match($summary)
	                                $summary=$summary.substring($match.index)
	                            }
	                        }
	
	                        $report["Summary"]=$summary
	                        $report["File"]=$txt
	                        if(-not ($reportnum -match "\w") -or -not ($reportnums.keys -contains $reportnum)){
	                            [void]$array.add($report.clone()) #<-------adding to the array
	                            if($reportnum -ne $null -and $reportnum -match "\w"){
	                                $reportnums[$reportnum]=$count
	                            }
	                            #write-output "Added "$report["Report #"]
	                            $count+=1
	                           
	                        }
	                        else{
	                            if($reportnums.keys -contains $reportnum){
	                                #write-output "replacement made at index "$reportnums[$reportnum]
	                                #Write-output "Before: "$array[$reportnums[$reportnum]]
	                                $prevReportIndex=$reportnums[$reportnum]
	                                #write-output "Swapped "$report.Index"for "$array[$prevReportIndex].Index
	                                $array[$prevReportIndex]=$report.clone()
	                                #Write-output "After: "$report
	                            }
	                        }
	
	                        $state=1
	                        $line= $line -replace "Reported: "
	                        $line= $line -replace "Location"
	                        $line= $line -replace "Report.*#"
	                        $line=$line -split ": "
	                        try{
	                            $report["Reported"]=$line[0]
	                            $report["Location"]=$line[1]
	                            $report["Report #"]=$line[2]
	                        }
	                        catch{}
	                        $summary=""
	                    }
	                    if($line -ne ""){
	                        $summary+=$line+" "
	                    }
	                }
	                #write-output $output": "$state
	            }
	            
	        }
	        finally {
	            $reader.Close()
	        }
	        if($state -eq 3){
	            $reportnum=$report["Report #"]
	            if($summary -like "*$reportnum*"){ 
	                $lowerIndex=$summary.indexof("$reportnum")+$reportnum.length
	                $upperIndex=$summary.lastindexOf(".")
	                if($upperIndex-$lowerIndex+1 -gt 0){
	                    $summary=$summary.substring($lowerIndex, $upperIndex-$lowerIndex+1)
	                }
	            }
	            if($summary -like "*Summary*"){
	                        
	                $lowerIndex=$summary.lastindexof("Summary")+9
	                $upperIndex=$summary.lastindexOf(".")
	                if($upperIndex -gt 0){
	                    $summary=$summary.substring($lowerIndex)   
	                }
	            }
	            $regEx = [regex]'\w'
	            $match=$regEx.Match($summary)
	            $summary=$summary.substring($match.index)
	            if($summary.length -gt 10){
	                if($summary.substring(0,10).equals("University")){
	                    $regEx = [regex] '\s{2,}'
	                    $match=$regEx.Match($summary)
	                    $summary=$summary.substring($match.index)
	                    $regEx = [regex]'\w'
	                    $match=$regEx.Match($summary)
	                    $summary=$summary.substring($match.index)
	                }
	            }
	
	            $report["Summary"]=$summary
	            $report["File"]=$txt
	            $count+=1
	            [void]$array.add($report.clone()) #<-------adding to the array
	             
	             #write-output "Added "$report["Report #"]
	        }
	    }
	    
	    $array= sortReports -inputArray $array
	    $retval=0
	    if($generateDataset){
	        if($filepath -like "*bin*"){
	            . $filepath\ReportIO.ps1
	        }
	        else {
	            . $filepath\bin\ReportIO.ps1
	        }
			if (-not ($dataset)){
	            $dataset="output.dps"
	        }
	        if(-not ($dataset -like "*.dps")){
	            $dataset+= ".dps"
	        }
	        if($append){
	            $retval = write-Reports2 -array $array -path "$filepath\data\$dataset" -append
	        }
	        else{
	            $retval = write-Reports2 -array $array -path "$filepath\data\$dataset" 
	        }
	    }
	    if(-not $suppress){
	        return $array
	    }
	    else{
	        return $retval
	    }
	}
	
	function sortReports{
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	         [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [System.Collections.ArrayList] $inputArray
	    )
	    
	    if($inputArray.count -gt 1){
	        $swapped=0;
	        [System.Collections.Hashtable] $tempReport=@{}
	        while($swapped-eq 0){
	           
	            $swapped=1
	            for($i=1; $i -lt $inputArray.Count; $i++){
	                if($inputArray[$i]."Report #" -eq $null -or $inputArray[$i-1]."Report #" -eq $null){
	                   
	                    continue
	                }
	                if($inputArray[$i]."Report #" -lt $inputArray[$i-1]."Report #"){
	                   
	                    $tempReport=$inputArray[$i]
	                    $inputArray[$i]=$inputArray[$i-1]
	                    $inputArray[$i-1]=$tempReport
	                    $swapped = 0
	                }
	            }
	        }
	    }
	  
	    return ,$inputArray #i changed this
	    
	}
	
}
#endregion Source: DPSTextParser.ps1

#region Source: bin\PDFConverter.ps1
function Invoke-PDFConverter_ps1
{
	 #Function for downloading a .pdf from a DPS link and converting it into a .txt file for storage
	#Parameters: 
	#link- link to DPS .pdf file
	#path- path for storing the final .txt file
	Function convertpdf{
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	        [string]$link,
	        [Alias("projectpath")]
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	        [string]$path
	    )
	    $output=new-object System.Collections.ArrayList
	    #extracting file name from link and changing its extention to .txt
	    $txtname=$link -split "/"
	    $txtname=$txtname[$txtname.length-1]
	    Write-Verbose "Extracted file name $txtname"
	    $txtname=$txtname -replace ".pdf",".txt"
	    Write-Verbose "File name converted to $txtname"
	
	    #Call upon a website to convert the .pdf for us by passing it our link to convert and retreiving the link to the .txt
	    $site= Invoke-WebRequest http://document.online-convert.com/convert-to-txt -SessionVariable sesh 
	    $Form=$site.Forms[1]
	    $Form.Fields["external_url"]=$link
	    try{
	        #posting to the website our filled out form containing the link and retreiving it's response
	        $site= Invoke-WebRequest $form.Action -WebSession $sesh -Body $Form -Method Post
	    }
	    catch{
	        Write-Error "Error has occured at Invoke-WebRequest Post Method: $_"
	        return
	    }
	
	    #the link for our .txt file is located at this index and key in the site that we requested
	    $downloadlink= $site.links[25].href 
	    Write-Verbose "Attempting to pull .txt from $downloadlink"
	    $WebClient = New-Object System.Net.WebClient
	    $month=$txtname.substring(0,2)
	    $year=$txtname.substring(4,2)
	
	    #implementing a loop to try to repeatedly query for the .txt until success (conversion takes a while with this site)
	    $success=1
	    while($success -eq 1){
	        try{
	            Start-sleep -Seconds 5   
	            $WebClient.DownloadFile("$downloadlink","$path\dpsreports\20$year\$month\$txtname")
	        }
	        catch{
	            Write-Verbose "No server response from server."
	            Write-Verbose "Trying again."
	            continue
	        }
	       
	        Write-output "Successfully created $txtname"
	        $success=0
	    }
	    return "$path\dpsreports\20$year\$month\$txtname"
	   
	    
	}
}
#endregion Source: PDFConverter.ps1

#region Source: bin\ReportIO.ps1
function Invoke-ReportIO_ps1
{
	function write-Reports{
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	        [System.Collections.ArrayList]$array,
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	        [string]$path,
	        [switch]$append
	    )
	    
	    [string]$line
	    $index=0
	    $size=$array.count
	    [string]$stringOutput=""
	    $stringOutput=""
	    if($append){
	        if(Test-path $path){
	            $reader = [System.IO.File]::OpenText("$path")
	            while(-not ($reader.EndOfStream)){
	                $line=$reader.readLine()
	                if($line -like "*Size:*"){
	                    $line=$line.split(':')
	                    $size+=$line[1]
	                    break
	                }
	            }
	            
	            $reader.close()
	            $content= Get-Content $path
	            $content[0]="Size:$size"
	            $content | Set-Content $path
	        }
	    }
	
	    if(-not ($path -like "*.dps")){
	        $path+="\output.dps"
	    }
	
	    if($append){
	        $index+=$size-$array.count
		}
	    else{
	        $stringOutput="Size:"+$size+"`n"
	    }
		$i=0
		$sw= New-Object System.IO.StreamWriter($path,$append)
		foreach ($case in $array)
		{
	        foreach($key in $case.keys){
	            if($key -ne "Index"){
	                $stringOutput += $key + "|" + $case.$key + "`n"   
	            }
	            if($key -eq "File"){
					if ($index % 500 -eq 0)
					{
						$sw.write($stringOutput)
						$stringOutput = ""
					}
				}
			}
			$stringOutput += "Index|" + $index + "`n"
			$index += 1
		}
		$sw.write($stringOutput)
		$sw.close()
		<#
	    if($index -ne $array.count){
	        $content= Get-Content $path
	        $content[0]="Size:$index"
	        $content | Set-Content $path
	    }#>
	}
	function read-Reports{
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	        [ValidateNotNull()]
	        [System.Collections.ArrayList]$array,
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	        [string]$path
	    )
	    $output = 1
	    if (-not ($array)){
	        $output=1
	    }
	    $reader = [System.IO.File]::OpenText("$path")
	    [string] $key=""
	    [string] $value=""
	    $report=@{"Index"=""; "Report #"="";"Incident"="";"Location"="";"Occurred"="";"Reported"="";"Disposition"="";"Summary"="";"File"=""}
	    $checklist=@{"Index"=0; "Report #"=0;"Incident"=0;"Location"=0;"Occurred"=0;"Reported"=0;"Disposition"=0;"Summary"=0;"File"=0}
	    $complete=0
	    $output=$false
	    if ($array -eq $null){
	        $output=
	        $array=new-object System.Collections.Arraylist
	    }
	    else{
	        $array.clear()
	    }
	    try {
	        for() {
	            
	            $line = $reader.ReadLine()
	            if ($line -eq $null) { break }
	            if($line -ne "" -and $line -like "*|*"){
	                $line=$line.split('|')
	                $key=$line[0]
	                $value=$line[1]
	            }
	            else{
	                continue
	            }
	            #$key
	            $report.$key=$value.trim()
	            $checklist.$key=1
	            foreach ($item in $checklist.values){
	                if ($item -eq 0){
	                    $complete=0
	                    break
	                }
	                $complete=1
	            }
	            if($complete -eq 1){
	                [void]$array.add($report.clone())
	                $checklist=@{"Index"=0; "Report #"=0;"Incident"=0;"Location"=0;"Occurred"=0;"Reported"=0;"Disposition"=0;"Summary"=0;"File"=0}
	            }
	        }
	        
	    }
	    finally {
	        $reader.Close()
	    }
	}
	<#under construction#>
	function write-Reports2{
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	        [System.Collections.ArrayList]$array,
	        [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	        [string]$path,
	        [switch]$append
	    )
	    $changemade = $false
	    [string]$line
	    $index=0
	    $size=$array.count
	    [string]$stringOutput=""
	    $stringOutput=""
	    if($append){
	        $dataset= new-object System.Collections.ArrayList
	        read-reports -array $dataset -path $path
	       
	    }
	
	    if(-not ($path -like "*.dps")){
	        $path+="\output.dps"
	    }
	    
		$i=0
	    if($append){
		    foreach ($case in $array)
		    {
	            [int]$i=$dataset.count-1
	            $x = $case."Report #"
	            if (-not ($x -match "\D"))
			    {	
	                if($dataset."Report #" -notcontains $x){
				        [int]$newReportNum = [convert]::ToInt32($x)
				        [int]$lower = 0
				        [int]$upper = $dataset.count - 1
				        $i = ($lower + $upper)/2
				        [int]$currReportNum = 0
				        while ($dataset[$i]."Report #" -match "\D") { $i++ }
	                    
				        while ($newReportNum -ne $currReportNum -and $upper -ne $lower)
				        {
	                        write-verbose "$i, $lower, $upper"
					        $currReportNum = $dataset[$i]."Report #"
					        if ($newReportNum -eq $currReportNum) { break }
	                        while ($dataset[$i]."Report #" -match "\D") { $i++ }
					        if ($newReportNum -gt $currReportNum) { $lower = $i }
					        if ($newReportNum -lt $currReportNum) { $upper = $i }
					        $i = ($lower + $upper)/2
					        if ($i -eq $lower -or $i -eq $upper) { break }
	                        
				        }
				        if ($i -eq $lower -or $i -eq $upper)
				        {
					        while ($i -lt $dataset.count -and $dataset[$i] -ne $null -and $newReportNum -gt $dataset[$i]."Report #") { $i++ }
				        }
	                }
	                else{
	                    write-verbose "ignored report # $x"
	                    continue
	                }
	            }
	            else{
	                continue
	            }
	            $case."Index" = $i+1
	            write-verbose "Inserted $case at $i"
	            $changemade= $true
			    [void]$dataset.insert($i, $case.clone())
	            $i++
			    for ($i; $i -lt $dataset.count; $i++)
			    {
	                if($dataset[$i] -ne $null){
				        $dataset[$i]."Index" = [System.Convert]::ToInt32($dataset[$i]."Index") + 1
	                }
			    }
		    }
	        if($changemade){
	            $sw= New-Object System.IO.StreamWriter($path,$false)
	            $size= $dataset.count
	            write-verbose "generated dataset of size $size"
	            $stringOutput="Size:"+$size+"`n"
	
	            write-verbose "done inserting "
	            foreach ($case in $dataset){
	                foreach($key in $case.keys){
	                    if($key -ne "Index"){
	                        $stringOutput += $key + "|" + $case.$key + "`n"   
	                    }
	                    if($key -eq "File"){
					        if ($index % 500 -eq 0)
					        {
						        $sw.write($stringOutput)
						        $stringOutput = ""
					        }
				        }
			        }
			        $stringOutput += "Index|" + $index + "`n"
			        $index += 1
	            }
		        $sw.write($stringOutput)
		        $sw.close()
	            return 1
	        }
	        else{
	            write-verbose "No changes made."
	            return 0
	        }
	    }
	    else{
	        $sw= New-Object System.IO.StreamWriter($path,$false)
	        foreach ($case in $array){
	            foreach($key in $case.keys){
	                if($key -ne "Index"){
	                    $stringOutput += $key + "|" + $case.$key + "`n"   
	                }
	                if($key -eq "File"){
					    if ($index % 500 -eq 0)
					    {
						    $sw.write($stringOutput)
						    $stringOutput = ""
					    }
				    }
			    }
			    $stringOutput += "Index|" + $index + "`n"
			    $index += 1
	        }
		    $sw.write($stringOutput)
		    $sw.close()
	        return 1
	    }
	
		<#
	    if($index -ne $array.count){
	        $content= Get-Content $path
	        $content[0]="Size:$index"
	        $content | Set-Content $path
	    }#>
	}
}
#endregion Source: ReportIO.ps1

#region Source: bin\makeHistogram.ps1
function Invoke-makeHistogram_ps1
{
	function generate-histogram ($filter, $field, $array){
	    $histogram = @{}
	    foreach($report in $array){
	    
	        $incident = $report.$field
	        if($field -eq "Reported" -or $field -eq "Occurred"){
	            $incident = $incident.split(" -")
	        }
	        else{
	            $incident = $incident.split(" ")
	        }
	        $string = ""
	        foreach ($word in $incident){
	            if($word -cmatch $filter){
	                $string += $word + " "
					if ($field -eq "Occurred") { break }
				}
			} #>
	        #$string = $report.location
	        if($histogram.Keys -contains $string){
	            $histogram.$string++
	        }
	        else{
	            $histogram.$string = 1
	        }
	    }
	    return $histogram
	}
}
#endregion Source: makeHistogram.ps1

#region Source: bin\UpdateDataset.ps1
function Invoke-UpdateDataset_ps1
{
	function update-dataset {
	    [CmdletBinding(DefaultParameterSetName='ByUserName')]
	    param(
	         [Parameter (
	            mandatory=$True,
	            valueFromPipeline=$True,
	            valueFromPipelineByPropertyName=$True)]
	         [string] $projectpath,
	         [string] $datasetname = "Backup2016.dps"
	    )
	    $addedval= $false
	    $dataset= New-object System.collections.arraylist
	    read-Reports -array $dataset -path $projectpath/data/$datasetname
	    $files = New-Object System.Collections.ArrayList
	    foreach ($file in $dataset."file"){
	        if($files -notcontains $file){
	            #$report
	            [void]$files.add($file)
	        }
	    }
	    $txtlist= dir -recurse $projectpath/dpsreports/*txt
	    $txtlist= $txtlist.name
	    foreach($txt in $txtlist){
	        if($files -notcontains $txt){
	            write-verbose "Adding $txt"
	            $addedval= $true
	            $val = parseReports -option 4 -projectpath $projectpath -file $txt -generateDataset -dataset $datasetname -append -suppress
	            return $val
	        }
	    }
	    if(-not $addedVal){
	        write-verbose "Dataset is already up-to-date"
	        return 0
	    }
	}
}
#endregion Source: UpdateDataset.ps1

#Start the application
Main ($CommandLine)
